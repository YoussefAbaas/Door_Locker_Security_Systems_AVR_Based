
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00003aa4  00003b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800130  00800130  00003c08  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00003c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121d  00000000  00000000  00006c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c58b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_8>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 34       	cpi	r26, 0x44	; 68
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 11 	call	0x221a	; 0x221a <main>
      8a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e1       	ldi	r26, 0x1A	; 26
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e1       	ldi	r24, 0x1A	; 26
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                                ISR Definitions                             *
 *******************************************************************************/
ISR (TIMER0_OVF_vect) /* ISR for timer 0 works with normal mode*/
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	timer0_ticks++;
     b70:	80 91 40 01 	lds	r24, 0x0140
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	80 93 40 01 	sts	0x0140, r24
	if(timer0_ticks==NUMBER_OF_OVERFLOWS_PER_SECOND_TIMER0)
     b7a:	80 91 40 01 	lds	r24, 0x0140
     b7e:	8e 31       	cpi	r24, 0x1E	; 30
     b80:	99 f5       	brne	.+102    	; 0xbe8 <__vector_9+0xa2>
	{
Timer0_seconds_MC1++;Timer0_seconds_MC2++;
     b82:	80 91 30 01 	lds	r24, 0x0130
     b86:	90 91 31 01 	lds	r25, 0x0131
     b8a:	a0 91 32 01 	lds	r26, 0x0132
     b8e:	b0 91 33 01 	lds	r27, 0x0133
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	a1 1d       	adc	r26, r1
     b96:	b1 1d       	adc	r27, r1
     b98:	80 93 30 01 	sts	0x0130, r24
     b9c:	90 93 31 01 	sts	0x0131, r25
     ba0:	a0 93 32 01 	sts	0x0132, r26
     ba4:	b0 93 33 01 	sts	0x0133, r27
     ba8:	80 91 34 01 	lds	r24, 0x0134
     bac:	90 91 35 01 	lds	r25, 0x0135
     bb0:	a0 91 36 01 	lds	r26, 0x0136
     bb4:	b0 91 37 01 	lds	r27, 0x0137
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
     bbe:	80 93 34 01 	sts	0x0134, r24
     bc2:	90 93 35 01 	sts	0x0135, r25
     bc6:	a0 93 36 01 	sts	0x0136, r26
     bca:	b0 93 37 01 	sts	0x0137, r27
if(g_callBackPtr != NULL_PTR)
     bce:	80 91 42 01 	lds	r24, 0x0142
     bd2:	90 91 43 01 	lds	r25, 0x0143
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	29 f0       	breq	.+10     	; 0xbe4 <__vector_9+0x9e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     bda:	e0 91 42 01 	lds	r30, 0x0142
     bde:	f0 91 43 01 	lds	r31, 0x0143
     be2:	09 95       	icall
	}
   timer0_ticks=0;
     be4:	10 92 40 01 	sts	0x0140, r1
	}
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_8>:
ISR (TIMER1_OVF_vect) /* ISR for timer 1 works with normal mode*/
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
Timer1_seconds_MC1++;Timer1_seconds_MC2++;
     c38:	80 91 38 01 	lds	r24, 0x0138
     c3c:	90 91 39 01 	lds	r25, 0x0139
     c40:	a0 91 3a 01 	lds	r26, 0x013A
     c44:	b0 91 3b 01 	lds	r27, 0x013B
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	a1 1d       	adc	r26, r1
     c4c:	b1 1d       	adc	r27, r1
     c4e:	80 93 38 01 	sts	0x0138, r24
     c52:	90 93 39 01 	sts	0x0139, r25
     c56:	a0 93 3a 01 	sts	0x013A, r26
     c5a:	b0 93 3b 01 	sts	0x013B, r27
     c5e:	80 91 3c 01 	lds	r24, 0x013C
     c62:	90 91 3d 01 	lds	r25, 0x013D
     c66:	a0 91 3e 01 	lds	r26, 0x013E
     c6a:	b0 91 3f 01 	lds	r27, 0x013F
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	a1 1d       	adc	r26, r1
     c72:	b1 1d       	adc	r27, r1
     c74:	80 93 3c 01 	sts	0x013C, r24
     c78:	90 93 3d 01 	sts	0x013D, r25
     c7c:	a0 93 3e 01 	sts	0x013E, r26
     c80:	b0 93 3f 01 	sts	0x013F, r27
if(g_callBackPtr != NULL_PTR)
     c84:	80 91 42 01 	lds	r24, 0x0142
     c88:	90 91 43 01 	lds	r25, 0x0143
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	29 f0       	breq	.+10     	; 0xc9a <__vector_8+0x8c>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     c90:	e0 91 42 01 	lds	r30, 0x0142
     c94:	f0 91 43 01 	lds	r31, 0x0143
     c98:	09 95       	icall
	}
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	7f 91       	pop	r23
     cac:	6f 91       	pop	r22
     cae:	5f 91       	pop	r21
     cb0:	4f 91       	pop	r20
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_19>:
ISR (TIMER0_COMP_vect) /* ISR for timer 0 works with compare mode */
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	timer0_ticks++;
     cea:	80 91 40 01 	lds	r24, 0x0140
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 40 01 	sts	0x0140, r24
	if(timer0_ticks==NUMBER_OF_COMPARES_PER_SECOND_TIMER0)
     cf4:	80 91 40 01 	lds	r24, 0x0140
     cf8:	8e 31       	cpi	r24, 0x1E	; 30
     cfa:	99 f5       	brne	.+102    	; 0xd62 <__vector_19+0xa2>
	{
Timer0_seconds_MC1++;Timer0_seconds_MC2++;
     cfc:	80 91 30 01 	lds	r24, 0x0130
     d00:	90 91 31 01 	lds	r25, 0x0131
     d04:	a0 91 32 01 	lds	r26, 0x0132
     d08:	b0 91 33 01 	lds	r27, 0x0133
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	a1 1d       	adc	r26, r1
     d10:	b1 1d       	adc	r27, r1
     d12:	80 93 30 01 	sts	0x0130, r24
     d16:	90 93 31 01 	sts	0x0131, r25
     d1a:	a0 93 32 01 	sts	0x0132, r26
     d1e:	b0 93 33 01 	sts	0x0133, r27
     d22:	80 91 34 01 	lds	r24, 0x0134
     d26:	90 91 35 01 	lds	r25, 0x0135
     d2a:	a0 91 36 01 	lds	r26, 0x0136
     d2e:	b0 91 37 01 	lds	r27, 0x0137
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	a1 1d       	adc	r26, r1
     d36:	b1 1d       	adc	r27, r1
     d38:	80 93 34 01 	sts	0x0134, r24
     d3c:	90 93 35 01 	sts	0x0135, r25
     d40:	a0 93 36 01 	sts	0x0136, r26
     d44:	b0 93 37 01 	sts	0x0137, r27
if(g_callBackPtr != NULL_PTR)
     d48:	80 91 42 01 	lds	r24, 0x0142
     d4c:	90 91 43 01 	lds	r25, 0x0143
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	29 f0       	breq	.+10     	; 0xd5e <__vector_19+0x9e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     d54:	e0 91 42 01 	lds	r30, 0x0142
     d58:	f0 91 43 01 	lds	r31, 0x0143
     d5c:	09 95       	icall
	}
    timer0_ticks=0;
     d5e:	10 92 40 01 	sts	0x0140, r1
	}
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <__vector_6>:
ISR (TIMER1_COMPA_vect) /* ISR for timer 1 works with compare mode */
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
Timer1_seconds_MC1++;Timer1_seconds_MC2++;
     db2:	80 91 38 01 	lds	r24, 0x0138
     db6:	90 91 39 01 	lds	r25, 0x0139
     dba:	a0 91 3a 01 	lds	r26, 0x013A
     dbe:	b0 91 3b 01 	lds	r27, 0x013B
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	a1 1d       	adc	r26, r1
     dc6:	b1 1d       	adc	r27, r1
     dc8:	80 93 38 01 	sts	0x0138, r24
     dcc:	90 93 39 01 	sts	0x0139, r25
     dd0:	a0 93 3a 01 	sts	0x013A, r26
     dd4:	b0 93 3b 01 	sts	0x013B, r27
     dd8:	80 91 3c 01 	lds	r24, 0x013C
     ddc:	90 91 3d 01 	lds	r25, 0x013D
     de0:	a0 91 3e 01 	lds	r26, 0x013E
     de4:	b0 91 3f 01 	lds	r27, 0x013F
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	a1 1d       	adc	r26, r1
     dec:	b1 1d       	adc	r27, r1
     dee:	80 93 3c 01 	sts	0x013C, r24
     df2:	90 93 3d 01 	sts	0x013D, r25
     df6:	a0 93 3e 01 	sts	0x013E, r26
     dfa:	b0 93 3f 01 	sts	0x013F, r27
if(g_callBackPtr != NULL_PTR)
     dfe:	80 91 42 01 	lds	r24, 0x0142
     e02:	90 91 43 01 	lds	r25, 0x0143
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_6+0x8c>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e0a:	e0 91 42 01 	lds	r30, 0x0142
     e0e:	f0 91 43 01 	lds	r31, 0x0143
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer0_Init(TimerConfig*Config_ptr)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <Timer0_Init+0x6>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_ptr->initial_value; //Set Timer initial value to 0
     e48:	a2 e5       	ldi	r26, 0x52	; 82
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	8c 93       	st	X, r24
	if(Config_ptr->mode==Normal)
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	fa 81       	ldd	r31, Y+2	; 0x02
     e5a:	80 81       	ld	r24, Z
     e5c:	80 38       	cpi	r24, 0x80	; 128
     e5e:	89 f4       	brne	.+34     	; 0xe82 <Timer0_Init+0x48>
	{
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
     e60:	a9 e5       	ldi	r26, 0x59	; 89
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e9 e5       	ldi	r30, 0x59	; 89
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock
	 */
	TCCR0 = Config_ptr->clock|Config_ptr->mode;
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	80 81       	ld	r24, Z
     e7e:	89 2b       	or	r24, r25
     e80:	8c 93       	st	X, r24
	}
	if(Config_ptr->mode==CTC)
     e82:	e9 81       	ldd	r30, Y+1	; 0x01
     e84:	fa 81       	ldd	r31, Y+2	; 0x02
     e86:	80 81       	ld	r24, Z
     e88:	88 38       	cpi	r24, 0x88	; 136
     e8a:	c1 f4       	brne	.+48     	; 0xebc <Timer0_Init+0x82>
		{
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     e8c:	a9 e5       	ldi	r26, 0x59	; 89
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e9 e5       	ldi	r30, 0x59	; 89
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	82 60       	ori	r24, 0x02	; 2
     e98:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock
			 */
		TCCR0 = Config_ptr->clock|Config_ptr->mode;
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	80 81       	ld	r24, Z
     eaa:	89 2b       	or	r24, r25
     eac:	8c 93       	st	X, r24
		OCR0  = Config_ptr->compare_value; // Set Compare Value
     eae:	ac e5       	ldi	r26, 0x5C	; 92
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	84 81       	ldd	r24, Z+4	; 0x04
     eb8:	95 81       	ldd	r25, Z+5	; 0x05
     eba:	8c 93       	st	X, r24
		}
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Timer0_Deinit>:
void Timer0_Deinit()
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
     ece:	e2 e5       	ldi	r30, 0x52	; 82
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	10 82       	st	Z, r1
	TCCR0=0;
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE0)&~(1<<OCIE0); //stop interrupts
     eda:	a9 e5       	ldi	r26, 0x59	; 89
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e9 e5       	ldi	r30, 0x59	; 89
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8c 7f       	andi	r24, 0xFC	; 252
     ee6:	8c 93       	st	X, r24
}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <Timer0_Stop>:
void Timer0_Stop()
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xf8; //clear prescaler bits
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e3 e5       	ldi	r30, 0x53	; 83
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	8c 93       	st	X, r24
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <Timer1_Init>:
void Timer1_Init(TimerConfig*Config_ptr)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <Timer1_Init+0x6>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01

	if(Config_ptr->mode==Normal)
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	80 81       	ld	r24, Z
     f1e:	80 38       	cpi	r24, 0x80	; 128
     f20:	c1 f4       	brne	.+48     	; 0xf52 <Timer1_Init+0x48>
		{
		TCNT1 = Config_ptr->initial_value;
     f22:	ac e4       	ldi	r26, 0x4C	; 76
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	9c 93       	st	X, r25
     f32:	8e 93       	st	-X, r24
		TCCR1B = Config_ptr->clock|Config_ptr->mode;
     f34:	ae e4       	ldi	r26, 0x4E	; 78
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	e9 81       	ldd	r30, Y+1	; 0x01
     f40:	fa 81       	ldd	r31, Y+2	; 0x02
     f42:	80 81       	ld	r24, Z
     f44:	89 2b       	or	r24, r25
     f46:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A); /* Enable Timer1 Normal Mode Interrupt */
     f48:	ef e4       	ldi	r30, 0x4F	; 79
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	88 e0       	ldi	r24, 0x08	; 8
     f4e:	80 83       	st	Z, r24
     f50:	23 c0       	rjmp	.+70     	; 0xf98 <Timer1_Init+0x8e>
		}
	else if(Config_ptr->mode==CTC)
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	80 81       	ld	r24, Z
     f58:	88 38       	cpi	r24, 0x88	; 136
     f5a:	f1 f4       	brne	.+60     	; 0xf98 <Timer1_Init+0x8e>
	{
		OCR1A = Config_ptr->compare_value;
     f5c:	aa e4       	ldi	r26, 0x4A	; 74
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e9 81       	ldd	r30, Y+1	; 0x01
     f62:	fa 81       	ldd	r31, Y+2	; 0x02
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	95 81       	ldd	r25, Z+5	; 0x05
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	9c 93       	st	X, r25
     f6c:	8e 93       	st	-X, r24
		TCCR1B = Config_ptr->clock|Config_ptr->mode;
     f6e:	ae e4       	ldi	r26, 0x4E	; 78
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e9 81       	ldd	r30, Y+1	; 0x01
     f74:	fa 81       	ldd	r31, Y+2	; 0x02
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	80 81       	ld	r24, Z
     f7e:	89 2b       	or	r24, r25
     f80:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
     f82:	ef e4       	ldi	r30, 0x4F	; 79
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     f8a:	a9 e5       	ldi	r26, 0x59	; 89
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e9 e5       	ldi	r30, 0x59	; 89
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 61       	ori	r24, 0x10	; 16
     f96:	8c 93       	st	X, r24
	}
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <Timer1_Deinit>:
void Timer1_Deinit()
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
     faa:	ec e4       	ldi	r30, 0x4C	; 76
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	11 82       	std	Z+1, r1	; 0x01
     fb0:	10 82       	st	Z, r1
	TCCR1A=0;
     fb2:	ef e4       	ldi	r30, 0x4F	; 79
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	10 82       	st	Z, r1
	TCCR1B=0;
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1)&~(1<<OCIE1A); //stop interrupts
     fbe:	a9 e5       	ldi	r26, 0x59	; 89
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e9 e5       	ldi	r30, 0x59	; 89
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8b 7e       	andi	r24, 0xEB	; 235
     fca:	8c 93       	st	X, r24
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <Timer1_Stop>:
void Timer1_Stop()
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=0xf8; //clear prescaler bits
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 7f       	andi	r24, 0xF8	; 248
     fe6:	8c 93       	st	X, r24
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <Timer0_setCallBack+0x6>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	90 93 43 01 	sts	0x0143, r25
    1004:	80 93 42 01 	sts	0x0142, r24
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <Timer1_setCallBack+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 43 01 	sts	0x0143, r25
    1028:	80 93 42 01 	sts	0x0142, r24
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <GPIO_setupPinDirection+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <GPIO_setupPinDirection+0x8>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	6a 83       	std	Y+2, r22	; 0x02
    1048:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <GPIO_setupPinDirection+0x1c>
    1050:	d5 c0       	rjmp	.+426    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	08 f0       	brcs	.+2      	; 0x105a <GPIO_setupPinDirection+0x24>
    1058:	d1 c0       	rjmp	.+418    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3d 83       	std	Y+5, r19	; 0x05
    1062:	2c 83       	std	Y+4, r18	; 0x04
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <GPIO_setupPinDirection+0x3a>
    106e:	43 c0       	rjmp	.+134    	; 0x10f6 <GPIO_setupPinDirection+0xc0>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	2c f4       	brge	.+10     	; 0x1084 <GPIO_setupPinDirection+0x4e>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	71 f0       	breq	.+28     	; 0x109e <GPIO_setupPinDirection+0x68>
    1082:	bc c0       	rjmp	.+376    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <GPIO_setupPinDirection+0x5a>
    108e:	5f c0       	rjmp	.+190    	; 0x114e <GPIO_setupPinDirection+0x118>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <GPIO_setupPinDirection+0x66>
    109a:	85 c0       	rjmp	.+266    	; 0x11a6 <GPIO_setupPinDirection+0x170>
    109c:	af c0       	rjmp	.+350    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	a1 f4       	brne	.+40     	; 0x10cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10a4:	aa e3       	ldi	r26, 0x3A	; 58
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ea e3       	ldi	r30, 0x3A	; 58
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_setupPinDirection+0x8c>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_setupPinDirection+0x88>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	98 c0       	rjmp	.+304    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10cc:	aa e3       	ldi	r26, 0x3A	; 58
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ea e3       	ldi	r30, 0x3A	; 58
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <GPIO_setupPinDirection+0xb4>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <GPIO_setupPinDirection+0xb0>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	83 c0       	rjmp	.+262    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	a1 f4       	brne	.+40     	; 0x1124 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10fc:	a7 e3       	ldi	r26, 0x37	; 55
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e3       	ldi	r30, 0x37	; 55
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_setupPinDirection+0xe4>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_setupPinDirection+0xe0>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	6c c0       	rjmp	.+216    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1124:	a7 e3       	ldi	r26, 0x37	; 55
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e7 e3       	ldi	r30, 0x37	; 55
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_setupPinDirection+0x10c>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_setupPinDirection+0x108>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	57 c0       	rjmp	.+174    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	a1 f4       	brne	.+40     	; 0x117c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1154:	a4 e3       	ldi	r26, 0x34	; 52
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e4 e3       	ldi	r30, 0x34	; 52
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_setupPinDirection+0x13c>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_setupPinDirection+0x138>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	40 c0       	rjmp	.+128    	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    117c:	a4 e3       	ldi	r26, 0x34	; 52
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 e3       	ldi	r30, 0x34	; 52
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_setupPinDirection+0x164>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_setupPinDirection+0x160>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	2b c0       	rjmp	.+86     	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	a1 f4       	brne	.+40     	; 0x11d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11ac:	a1 e3       	ldi	r26, 0x31	; 49
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e1 e3       	ldi	r30, 0x31	; 49
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_setupPinDirection+0x194>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_setupPinDirection+0x190>
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11d4:	a1 e3       	ldi	r26, 0x31	; 49
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_setupPinDirection+0x1bc>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_setupPinDirection+0x1b8>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <GPIO_writePin+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <GPIO_writePin+0x8>
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	6a 83       	std	Y+2, r22	; 0x02
    121e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	08 f0       	brcs	.+2      	; 0x1228 <GPIO_writePin+0x1c>
    1226:	d5 c0       	rjmp	.+426    	; 0x13d2 <GPIO_writePin+0x1c6>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	08 f0       	brcs	.+2      	; 0x1230 <GPIO_writePin+0x24>
    122e:	d1 c0       	rjmp	.+418    	; 0x13d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <GPIO_writePin+0x3a>
    1244:	43 c0       	rjmp	.+134    	; 0x12cc <GPIO_writePin+0xc0>
    1246:	2c 81       	ldd	r18, Y+4	; 0x04
    1248:	3d 81       	ldd	r19, Y+5	; 0x05
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <GPIO_writePin+0x4e>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	71 f0       	breq	.+28     	; 0x1274 <GPIO_writePin+0x68>
    1258:	bc c0       	rjmp	.+376    	; 0x13d2 <GPIO_writePin+0x1c6>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_writePin+0x5a>
    1264:	5f c0       	rjmp	.+190    	; 0x1324 <GPIO_writePin+0x118>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <GPIO_writePin+0x66>
    1270:	85 c0       	rjmp	.+266    	; 0x137c <GPIO_writePin+0x170>
    1272:	af c0       	rjmp	.+350    	; 0x13d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	a1 f4       	brne	.+40     	; 0x12a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_writePin+0x8c>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_writePin+0x88>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	98 c0       	rjmp	.+304    	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12a2:	ab e3       	ldi	r26, 0x3B	; 59
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e3       	ldi	r30, 0x3B	; 59
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_writePin+0xb4>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_writePin+0xb0>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	83 c0       	rjmp	.+262    	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	a1 f4       	brne	.+40     	; 0x12fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12d2:	a8 e3       	ldi	r26, 0x38	; 56
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_writePin+0xe4>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_writePin+0xe0>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	6c c0       	rjmp	.+216    	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0x10c>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0x108>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	57 c0       	rjmp	.+174    	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	a1 f4       	brne	.+40     	; 0x1352 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    132a:	a5 e3       	ldi	r26, 0x35	; 53
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <GPIO_writePin+0x13c>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <GPIO_writePin+0x138>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1352:	a5 e3       	ldi	r26, 0x35	; 53
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e3       	ldi	r30, 0x35	; 53
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_writePin+0x164>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_writePin+0x160>
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	2b c0       	rjmp	.+86     	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	a1 f4       	brne	.+40     	; 0x13aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <GPIO_writePin+0x194>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <GPIO_writePin+0x190>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13aa:	a2 e3       	ldi	r26, 0x32	; 50
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <GPIO_writePin+0x1bc>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <GPIO_writePin+0x1b8>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_readPin+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_readPin+0x8>
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <GPIO_readPin+0x1c>
    13fc:	84 c0       	rjmp	.+264    	; 0x1506 <GPIO_readPin+0x124>
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	08 f0       	brcs	.+2      	; 0x1406 <GPIO_readPin+0x24>
    1404:	80 c0       	rjmp	.+256    	; 0x1506 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3d 83       	std	Y+5, r19	; 0x05
    140e:	2c 83       	std	Y+4, r18	; 0x04
    1410:	4c 81       	ldd	r20, Y+4	; 0x04
    1412:	5d 81       	ldd	r21, Y+5	; 0x05
    1414:	41 30       	cpi	r20, 0x01	; 1
    1416:	51 05       	cpc	r21, r1
    1418:	79 f1       	breq	.+94     	; 0x1478 <GPIO_readPin+0x96>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	91 05       	cpc	r25, r1
    1422:	34 f4       	brge	.+12     	; 0x1430 <GPIO_readPin+0x4e>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	21 15       	cp	r18, r1
    142a:	31 05       	cpc	r19, r1
    142c:	69 f0       	breq	.+26     	; 0x1448 <GPIO_readPin+0x66>
    142e:	6b c0       	rjmp	.+214    	; 0x1506 <GPIO_readPin+0x124>
    1430:	4c 81       	ldd	r20, Y+4	; 0x04
    1432:	5d 81       	ldd	r21, Y+5	; 0x05
    1434:	42 30       	cpi	r20, 0x02	; 2
    1436:	51 05       	cpc	r21, r1
    1438:	b9 f1       	breq	.+110    	; 0x14a8 <GPIO_readPin+0xc6>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <GPIO_readPin+0x64>
    1444:	49 c0       	rjmp	.+146    	; 0x14d8 <GPIO_readPin+0xf6>
    1446:	5f c0       	rjmp	.+190    	; 0x1506 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1448:	e9 e3       	ldi	r30, 0x39	; 57
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_readPin+0x7e>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_readPin+0x7a>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	90 70       	andi	r25, 0x00	; 0
    146a:	88 23       	and	r24, r24
    146c:	19 f0       	breq	.+6      	; 0x1474 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	49 c0       	rjmp	.+146    	; 0x1506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	47 c0       	rjmp	.+142    	; 0x1506 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1478:	e6 e3       	ldi	r30, 0x36	; 54
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_readPin+0xae>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_readPin+0xaa>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	88 23       	and	r24, r24
    149c:	19 f0       	breq	.+6      	; 0x14a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	31 c0       	rjmp	.+98     	; 0x1506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	2f c0       	rjmp	.+94     	; 0x1506 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14a8:	e3 e3       	ldi	r30, 0x33	; 51
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_readPin+0xde>
    14bc:	55 95       	asr	r21
    14be:	47 95       	ror	r20
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_readPin+0xda>
    14c4:	ca 01       	movw	r24, r20
    14c6:	81 70       	andi	r24, 0x01	; 1
    14c8:	90 70       	andi	r25, 0x00	; 0
    14ca:	88 23       	and	r24, r24
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	19 c0       	rjmp	.+50     	; 0x1506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	17 c0       	rjmp	.+46     	; 0x1506 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14d8:	e0 e3       	ldi	r30, 0x30	; 48
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_readPin+0x10e>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_readPin+0x10a>
    14f4:	ca 01       	movw	r24, r20
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	90 70       	andi	r25, 0x00	; 0
    14fa:	88 23       	and	r24, r24
    14fc:	19 f0       	breq	.+6      	; 0x1504 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1504:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <GPIO_setupPortDirection+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <GPIO_setupPortDirection+0x8>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	90 f5       	brcc	.+100    	; 0x1592 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3c 83       	std	Y+4, r19	; 0x04
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	d1 f0       	breq	.+52     	; 0x1576 <GPIO_setupPortDirection+0x5e>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	2c f4       	brge	.+10     	; 0x1556 <GPIO_setupPortDirection+0x3e>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	61 f0       	breq	.+24     	; 0x156c <GPIO_setupPortDirection+0x54>
    1554:	1e c0       	rjmp	.+60     	; 0x1592 <GPIO_setupPortDirection+0x7a>
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	3c 81       	ldd	r19, Y+4	; 0x04
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	81 f0       	breq	.+32     	; 0x1580 <GPIO_setupPortDirection+0x68>
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <GPIO_setupPortDirection+0x72>
    156a:	13 c0       	rjmp	.+38     	; 0x1592 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	80 83       	st	Z, r24
    1574:	0e c0       	rjmp	.+28     	; 0x1592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1576:	e7 e3       	ldi	r30, 0x37	; 55
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	80 83       	st	Z, r24
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1580:	e4 e3       	ldi	r30, 0x34	; 52
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 83       	st	Z, r24
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    158a:	e1 e3       	ldi	r30, 0x31	; 49
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
			break;
		}
	}
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_writePort+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <GPIO_writePort+0x8>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	90 f5       	brcc	.+100    	; 0x161a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3c 83       	std	Y+4, r19	; 0x04
    15be:	2b 83       	std	Y+3, r18	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <GPIO_writePort+0x5e>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <GPIO_writePort+0x3e>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <GPIO_writePort+0x54>
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <GPIO_writePort+0x7a>
    15de:	2b 81       	ldd	r18, Y+3	; 0x03
    15e0:	3c 81       	ldd	r19, Y+4	; 0x04
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <GPIO_writePort+0x68>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <GPIO_writePort+0x72>
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	80 83       	st	Z, r24
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	80 83       	st	Z, r24
    1606:	09 c0       	rjmp	.+18     	; 0x161a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 83       	st	Z, r24
    1610:	04 c0       	rjmp	.+8      	; 0x161a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 83       	st	Z, r24
			break;
		}
	}
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_readPort+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <GPIO_readPort+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1636:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	90 f5       	brcc	.+100    	; 0x16a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	d1 f0       	breq	.+52     	; 0x1686 <GPIO_readPort+0x5e>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <GPIO_readPort+0x3e>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <GPIO_readPort+0x54>
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <GPIO_readPort+0x7a>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	81 f0       	breq	.+32     	; 0x1690 <GPIO_readPort+0x68>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <GPIO_readPort+0x72>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    167c:	e9 e3       	ldi	r30, 0x39	; 57
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	0e c0       	rjmp	.+28     	; 0x16a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1686:	e6 e3       	ldi	r30, 0x36	; 54
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1690:	e3 e3       	ldi	r30, 0x33	; 51
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    169a:	e0 e3       	ldi	r30, 0x30	; 48
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <KEYPAD_getPressedKey+0x6>
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    16be:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    16c0:	1b 82       	std	Y+3, r1	; 0x03
    16c2:	43 c0       	rjmp	.+134    	; 0x174a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	98 2f       	mov	r25, r24
    16d0:	9c 5f       	subi	r25, 0xFC	; 252
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	69 2f       	mov	r22, r25
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 1b 08 	call	0x1036	; 0x1036 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 01       	movw	r18, r24
    16e4:	2c 5f       	subi	r18, 0xFC	; 252
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <KEYPAD_getPressedKey+0x40>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	2a 95       	dec	r18
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <KEYPAD_getPressedKey+0x3c>
    16f6:	80 95       	com	r24
    16f8:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	69 81       	ldd	r22, Y+1	; 0x01
    16fe:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1702:	1a 82       	std	Y+2, r1	; 0x02
    1704:	1c c0       	rjmp	.+56     	; 0x173e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	6a 81       	ldd	r22, Y+2	; 0x02
    170a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <GPIO_readPin>
    170e:	88 23       	and	r24, r24
    1710:	99 f4       	brne	.+38     	; 0x1738 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	98 2f       	mov	r25, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	89 0f       	add	r24, r25
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	0e 94 aa 0b 	call	0x1754	; 0x1754 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	84 30       	cpi	r24, 0x04	; 4
    1742:	08 f3       	brcs	.-62     	; 0x1706 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	08 f4       	brcc	.+2      	; 0x1752 <KEYPAD_getPressedKey+0xa0>
    1750:	b9 cf       	rjmp	.-142    	; 0x16c4 <KEYPAD_getPressedKey+0x12>
    1752:	b6 cf       	rjmp	.-148    	; 0x16c0 <KEYPAD_getPressedKey+0xe>

00001754 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <KEYPAD_4x4_adjustKeyNumber+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <KEYPAD_4x4_adjustKeyNumber+0x8>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1762:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3c 83       	std	Y+4, r19	; 0x04
    176c:	2b 83       	std	Y+3, r18	; 0x03
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1778:	70 c0       	rjmp	.+224    	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0x106>
    177a:	2b 81       	ldd	r18, Y+3	; 0x03
    177c:	3c 81       	ldd	r19, Y+4	; 0x04
    177e:	29 30       	cpi	r18, 0x09	; 9
    1780:	31 05       	cpc	r19, r1
    1782:	5c f5       	brge	.+86     	; 0x17da <KEYPAD_4x4_adjustKeyNumber+0x86>
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    178e:	59 c0       	rjmp	.+178    	; 0x1842 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	25 30       	cpi	r18, 0x05	; 5
    1796:	31 05       	cpc	r19, r1
    1798:	9c f4       	brge	.+38     	; 0x17c0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17a4:	48 c0       	rjmp	.+144    	; 0x1836 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	23 30       	cpi	r18, 0x03	; 3
    17ac:	31 05       	cpc	r19, r1
    17ae:	0c f0       	brlt	.+2      	; 0x17b2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17b0:	45 c0       	rjmp	.+138    	; 0x183c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <KEYPAD_4x4_adjustKeyNumber+0x6a>
    17bc:	39 c0       	rjmp	.+114    	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    17be:	67 c0       	rjmp	.+206    	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	26 30       	cpi	r18, 0x06	; 6
    17c6:	31 05       	cpc	r19, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <KEYPAD_4x4_adjustKeyNumber+0x78>
    17ca:	41 c0       	rjmp	.+130    	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	87 30       	cpi	r24, 0x07	; 7
    17d2:	91 05       	cpc	r25, r1
    17d4:	0c f0       	brlt	.+2      	; 0x17d8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    17d6:	3e c0       	rjmp	.+124    	; 0x1854 <KEYPAD_4x4_adjustKeyNumber+0x100>
    17d8:	37 c0       	rjmp	.+110    	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	2c 30       	cpi	r18, 0x0C	; 12
    17e0:	31 05       	cpc	r19, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    17e4:	46 c0       	rjmp	.+140    	; 0x1872 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	8d 30       	cpi	r24, 0x0D	; 13
    17ec:	91 05       	cpc	r25, r1
    17ee:	5c f4       	brge	.+22     	; 0x1806 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	2a 30       	cpi	r18, 0x0A	; 10
    17f6:	31 05       	cpc	r19, r1
    17f8:	b1 f1       	breq	.+108    	; 0x1866 <KEYPAD_4x4_adjustKeyNumber+0x112>
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	8b 30       	cpi	r24, 0x0B	; 11
    1800:	91 05       	cpc	r25, r1
    1802:	a4 f5       	brge	.+104    	; 0x186c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1804:	2d c0       	rjmp	.+90     	; 0x1860 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	3c 81       	ldd	r19, Y+4	; 0x04
    180a:	2e 30       	cpi	r18, 0x0E	; 14
    180c:	31 05       	cpc	r19, r1
    180e:	b9 f1       	breq	.+110    	; 0x187e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	8e 30       	cpi	r24, 0x0E	; 14
    1816:	91 05       	cpc	r25, r1
    1818:	7c f1       	brlt	.+94     	; 0x1878 <KEYPAD_4x4_adjustKeyNumber+0x124>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	2f 30       	cpi	r18, 0x0F	; 15
    1820:	31 05       	cpc	r19, r1
    1822:	79 f1       	breq	.+94     	; 0x1882 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	80 31       	cpi	r24, 0x10	; 16
    182a:	91 05       	cpc	r25, r1
    182c:	69 f1       	breq	.+90     	; 0x1888 <KEYPAD_4x4_adjustKeyNumber+0x134>
    182e:	2f c0       	rjmp	.+94     	; 0x188e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1830:	87 e0       	ldi	r24, 0x07	; 7
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	2e c0       	rjmp	.+92     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1836:	88 e0       	ldi	r24, 0x08	; 8
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	2b c0       	rjmp	.+86     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    183c:	89 e0       	ldi	r24, 0x09	; 9
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	28 c0       	rjmp	.+80     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1842:	85 e2       	ldi	r24, 0x25	; 37
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	25 c0       	rjmp	.+74     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1848:	84 e0       	ldi	r24, 0x04	; 4
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	22 c0       	rjmp	.+68     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    184e:	85 e0       	ldi	r24, 0x05	; 5
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	1f c0       	rjmp	.+62     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1854:	86 e0       	ldi	r24, 0x06	; 6
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	1c c0       	rjmp	.+56     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    185a:	8a e2       	ldi	r24, 0x2A	; 42
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	19 c0       	rjmp	.+50     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	16 c0       	rjmp	.+44     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	13 c0       	rjmp	.+38     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1872:	8d e2       	ldi	r24, 0x2D	; 45
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1878:	8d e0       	ldi	r24, 0x0D	; 13
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1882:	8d e3       	ldi	r24, 0x3D	; 61
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	05 c0       	rjmp	.+10     	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1888:	8b e2       	ldi	r24, 0x2B	; 43
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 1b 08 	call	0x1036	; 0x1036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	65 e0       	ldi	r22, 0x05	; 5
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 1b 08 	call	0x1036	; 0x1036 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	66 e0       	ldi	r22, 0x06	; 6
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 1b 08 	call	0x1036	; 0x1036 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	6f ef       	ldi	r22, 0xFF	; 255
    18cc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    18d0:	88 e3       	ldi	r24, 0x38	; 56
    18d2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18d6:	8c e0       	ldi	r24, 0x0C	; 12
    18d8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_sendCommand>
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	e9 97       	sbiw	r28, 0x39	; 57
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	64 e0       	ldi	r22, 0x04	; 4
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	65 e0       	ldi	r22, 0x05	; 5
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e8       	ldi	r26, 0x80	; 128
    1918:	bf e3       	ldi	r27, 0x3F	; 63
    191a:	8d ab       	std	Y+53, r24	; 0x35
    191c:	9e ab       	std	Y+54, r25	; 0x36
    191e:	af ab       	std	Y+55, r26	; 0x37
    1920:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6d a9       	ldd	r22, Y+53	; 0x35
    1924:	7e a9       	ldd	r23, Y+54	; 0x36
    1926:	8f a9       	ldd	r24, Y+55	; 0x37
    1928:	98 ad       	ldd	r25, Y+56	; 0x38
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	89 ab       	std	Y+49, r24	; 0x31
    193c:	9a ab       	std	Y+50, r25	; 0x32
    193e:	ab ab       	std	Y+51, r26	; 0x33
    1940:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1942:	69 a9       	ldd	r22, Y+49	; 0x31
    1944:	7a a9       	ldd	r23, Y+50	; 0x32
    1946:	8b a9       	ldd	r24, Y+51	; 0x33
    1948:	9c a9       	ldd	r25, Y+52	; 0x34
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_sendCommand+0x7c>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1964:	69 a9       	ldd	r22, Y+49	; 0x31
    1966:	7a a9       	ldd	r23, Y+50	; 0x32
    1968:	8b a9       	ldd	r24, Y+51	; 0x33
    196a:	9c a9       	ldd	r25, Y+52	; 0x34
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6d a9       	ldd	r22, Y+53	; 0x35
    197e:	7e a9       	ldd	r23, Y+54	; 0x36
    1980:	8f a9       	ldd	r24, Y+55	; 0x37
    1982:	98 ad       	ldd	r25, Y+56	; 0x38
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	98 ab       	std	Y+48, r25	; 0x30
    19a2:	8f a7       	std	Y+47, r24	; 0x2f
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_sendCommand+0xdc>
    19a6:	89 e1       	ldi	r24, 0x19	; 25
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e a7       	std	Y+46, r25	; 0x2e
    19ac:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    19b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_sendCommand+0xca>
    19b6:	9e a7       	std	Y+46, r25	; 0x2e
    19b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    19bc:	98 a9       	ldd	r25, Y+48	; 0x30
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	98 ab       	std	Y+48, r25	; 0x30
    19c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c6:	98 a9       	ldd	r25, Y+48	; 0x30
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_sendCommand+0xbe>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	98 ab       	std	Y+48, r25	; 0x30
    19e0:	8f a7       	std	Y+47, r24	; 0x2f
    19e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e4:	98 a9       	ldd	r25, Y+48	; 0x30
    19e6:	9c a7       	std	Y+44, r25	; 0x2c
    19e8:	8b a7       	std	Y+43, r24	; 0x2b
    19ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_sendCommand+0x106>
    19f2:	9c a7       	std	Y+44, r25	; 0x2c
    19f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	66 e0       	ldi	r22, 0x06	; 6
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e8       	ldi	r26, 0x80	; 128
    1a06:	bf e3       	ldi	r27, 0x3F	; 63
    1a08:	8f a3       	std	Y+39, r24	; 0x27
    1a0a:	98 a7       	std	Y+40, r25	; 0x28
    1a0c:	a9 a7       	std	Y+41, r26	; 0x29
    1a0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	6f a1       	ldd	r22, Y+39	; 0x27
    1a12:	78 a5       	ldd	r23, Y+40	; 0x28
    1a14:	89 a5       	ldd	r24, Y+41	; 0x29
    1a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a e7       	ldi	r20, 0x7A	; 122
    1a1e:	53 e4       	ldi	r21, 0x43	; 67
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	8b a3       	std	Y+35, r24	; 0x23
    1a2a:	9c a3       	std	Y+36, r25	; 0x24
    1a2c:	ad a3       	std	Y+37, r26	; 0x25
    1a2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a30:	6b a1       	ldd	r22, Y+35	; 0x23
    1a32:	7c a1       	ldd	r23, Y+36	; 0x24
    1a34:	8d a1       	ldd	r24, Y+37	; 0x25
    1a36:	9e a1       	ldd	r25, Y+38	; 0x26
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	5f e3       	ldi	r21, 0x3F	; 63
    1a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a44:	88 23       	and	r24, r24
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9a a3       	std	Y+34, r25	; 0x22
    1a4e:	89 a3       	std	Y+33, r24	; 0x21
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1a52:	6b a1       	ldd	r22, Y+35	; 0x23
    1a54:	7c a1       	ldd	r23, Y+36	; 0x24
    1a56:	8d a1       	ldd	r24, Y+37	; 0x25
    1a58:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	3f ef       	ldi	r19, 0xFF	; 255
    1a5e:	4f e7       	ldi	r20, 0x7F	; 127
    1a60:	57 e4       	ldi	r21, 0x47	; 71
    1a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a66:	18 16       	cp	r1, r24
    1a68:	4c f5       	brge	.+82     	; 0x1abc <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9a a3       	std	Y+34, r25	; 0x22
    1a90:	89 a3       	std	Y+33, r24	; 0x21
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <LCD_sendCommand+0x1ca>
    1a94:	89 e1       	ldi	r24, 0x19	; 25
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	98 a3       	std	Y+32, r25	; 0x20
    1a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_sendCommand+0x1b8>
    1aa4:	98 a3       	std	Y+32, r25	; 0x20
    1aa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <LCD_sendCommand+0x1ac>
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	6b a1       	ldd	r22, Y+35	; 0x23
    1abe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_sendCommand+0x1f4>
    1ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	69 ad       	ldd	r22, Y+57	; 0x39
    1ae8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <GPIO_writePort>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e8       	ldi	r26, 0x80	; 128
    1af2:	bf e3       	ldi	r27, 0x3F	; 63
    1af4:	89 8f       	std	Y+25, r24	; 0x19
    1af6:	9a 8f       	std	Y+26, r25	; 0x1a
    1af8:	ab 8f       	std	Y+27, r26	; 0x1b
    1afa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	69 8d       	ldd	r22, Y+25	; 0x19
    1afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	53 e4       	ldi	r21, 0x43	; 67
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8d 8b       	std	Y+21, r24	; 0x15
    1b16:	9e 8b       	std	Y+22, r25	; 0x16
    1b18:	af 8b       	std	Y+23, r26	; 0x17
    1b1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <LCD_sendCommand+0x256>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b40:	7e 89       	ldd	r23, Y+22	; 0x16
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	69 8d       	ldd	r22, Y+25	; 0x19
    1b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <LCD_sendCommand+0x2b6>
    1b80:	89 e1       	ldi	r24, 0x19	; 25
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	89 89       	ldd	r24, Y+17	; 0x11
    1b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_sendCommand+0x2a4>
    1b90:	9a 8b       	std	Y+18, r25	; 0x12
    1b92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <LCD_sendCommand+0x298>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	98 8b       	std	Y+16, r25	; 0x10
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
    1bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc6:	98 89       	ldd	r25, Y+16	; 0x10
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_sendCommand+0x2e0>
    1bcc:	98 8b       	std	Y+16, r25	; 0x10
    1bce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	66 e0       	ldi	r22, 0x06	; 6
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_sendCommand+0x344>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_sendCommand+0x3a4>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_sendCommand+0x392>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_sendCommand+0x386>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_sendCommand+0x3ce>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1cbe:	e9 96       	adiw	r28, 0x39	; 57
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	e9 97       	sbiw	r28, 0x39	; 57
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	64 e0       	ldi	r22, 0x04	; 4
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	65 e0       	ldi	r22, 0x05	; 5
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e8       	ldi	r26, 0x80	; 128
    1d00:	bf e3       	ldi	r27, 0x3F	; 63
    1d02:	8d ab       	std	Y+53, r24	; 0x35
    1d04:	9e ab       	std	Y+54, r25	; 0x36
    1d06:	af ab       	std	Y+55, r26	; 0x37
    1d08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d10:	98 ad       	ldd	r25, Y+56	; 0x38
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	89 ab       	std	Y+49, r24	; 0x31
    1d24:	9a ab       	std	Y+50, r25	; 0x32
    1d26:	ab ab       	std	Y+51, r26	; 0x33
    1d28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	98 ab       	std	Y+48, r25	; 0x30
    1d48:	8f a7       	std	Y+47, r24	; 0x2f
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1d4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d50:	8b a9       	ldd	r24, Y+51	; 0x33
    1d52:	9c a9       	ldd	r25, Y+52	; 0x34
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6d a9       	ldd	r22, Y+53	; 0x35
    1d66:	7e a9       	ldd	r23, Y+54	; 0x36
    1d68:	8f a9       	ldd	r24, Y+55	; 0x37
    1d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	98 ab       	std	Y+48, r25	; 0x30
    1d8a:	8f a7       	std	Y+47, r24	; 0x2f
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_displayCharacter+0xdc>
    1d8e:	89 e1       	ldi	r24, 0x19	; 25
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e a7       	std	Y+46, r25	; 0x2e
    1d94:	8d a7       	std	Y+45, r24	; 0x2d
    1d96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_displayCharacter+0xca>
    1d9e:	9e a7       	std	Y+46, r25	; 0x2e
    1da0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da4:	98 a9       	ldd	r25, Y+48	; 0x30
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dae:	98 a9       	ldd	r25, Y+48	; 0x30
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_displayCharacter+0xbe>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	69 a9       	ldd	r22, Y+49	; 0x31
    1db8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dba:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dcc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dce:	9c a7       	std	Y+44, r25	; 0x2c
    1dd0:	8b a7       	std	Y+43, r24	; 0x2b
    1dd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_displayCharacter+0x106>
    1dda:	9c a7       	std	Y+44, r25	; 0x2c
    1ddc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	66 e0       	ldi	r22, 0x06	; 6
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e8       	ldi	r26, 0x80	; 128
    1dee:	bf e3       	ldi	r27, 0x3F	; 63
    1df0:	8f a3       	std	Y+39, r24	; 0x27
    1df2:	98 a7       	std	Y+40, r25	; 0x28
    1df4:	a9 a7       	std	Y+41, r26	; 0x29
    1df6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	53 e4       	ldi	r21, 0x43	; 67
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	8b a3       	std	Y+35, r24	; 0x23
    1e12:	9c a3       	std	Y+36, r25	; 0x24
    1e14:	ad a3       	std	Y+37, r26	; 0x25
    1e16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9a a3       	std	Y+34, r25	; 0x22
    1e36:	89 a3       	std	Y+33, r24	; 0x21
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e40:	9e a1       	ldd	r25, Y+38	; 0x26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6f a1       	ldd	r22, Y+39	; 0x27
    1e54:	78 a5       	ldd	r23, Y+40	; 0x28
    1e56:	89 a5       	ldd	r24, Y+41	; 0x29
    1e58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <LCD_displayCharacter+0x1ca>
    1e7c:	89 e1       	ldi	r24, 0x19	; 25
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	98 a3       	std	Y+32, r25	; 0x20
    1e82:	8f 8f       	std	Y+31, r24	; 0x1f
    1e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e86:	98 a1       	ldd	r25, Y+32	; 0x20
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_displayCharacter+0x1b8>
    1e8c:	98 a3       	std	Y+32, r25	; 0x20
    1e8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	89 a1       	ldd	r24, Y+33	; 0x21
    1e92:	9a a1       	ldd	r25, Y+34	; 0x22
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	9a a3       	std	Y+34, r25	; 0x22
    1e98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <LCD_displayCharacter+0x1ac>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eba:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_displayCharacter+0x1f4>
    1ec8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	69 ad       	ldd	r22, Y+57	; 0x39
    1ed0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <GPIO_writePort>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	89 8f       	std	Y+25, r24	; 0x19
    1ede:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a e7       	ldi	r20, 0x7A	; 122
    1ef2:	53 e4       	ldi	r21, 0x43	; 67
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8d 8b       	std	Y+21, r24	; 0x15
    1efe:	9e 8b       	std	Y+22, r25	; 0x16
    1f00:	af 8b       	std	Y+23, r26	; 0x17
    1f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <LCD_displayCharacter+0x2b6>
    1f68:	89 e1       	ldi	r24, 0x19	; 25
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	9a 89       	ldd	r25, Y+18	; 0x12
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_displayCharacter+0x2a4>
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8b 89       	ldd	r24, Y+19	; 0x13
    1f88:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <LCD_displayCharacter+0x298>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
    1fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fae:	98 89       	ldd	r25, Y+16	; 0x10
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_displayCharacter+0x2e0>
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	66 e0       	ldi	r22, 0x06	; 6
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_displayCharacter+0x344>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_displayCharacter+0x3a4>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_displayCharacter+0x392>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_displayCharacter+0x386>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_displayCharacter+0x3ce>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    20a6:	e9 96       	adiw	r28, 0x39	; 57
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_displayString+0x6>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20c8:	19 82       	std	Y+1, r1	; 0x01
    20ca:	0e c0       	rjmp	.+28     	; 0x20e8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	80 81       	ld	r24, Z
    20de:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_displayCharacter>
		i++;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	39 f7       	brne	.-50     	; 0x20cc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <LCD_moveCursor+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <LCD_moveCursor+0x8>
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8a 83       	std	Y+2, r24	; 0x02
    211a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	3d 83       	std	Y+5, r19	; 0x05
    2124:	2c 83       	std	Y+4, r18	; 0x04
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	c1 f0       	breq	.+48     	; 0x2160 <LCD_moveCursor+0x56>
    2130:	2c 81       	ldd	r18, Y+4	; 0x04
    2132:	3d 81       	ldd	r19, Y+5	; 0x05
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	2c f4       	brge	.+10     	; 0x2144 <LCD_moveCursor+0x3a>
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	61 f0       	breq	.+24     	; 0x215a <LCD_moveCursor+0x50>
    2142:	19 c0       	rjmp	.+50     	; 0x2176 <LCD_moveCursor+0x6c>
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	69 f0       	breq	.+26     	; 0x2168 <LCD_moveCursor+0x5e>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	91 05       	cpc	r25, r1
    2156:	61 f0       	breq	.+24     	; 0x2170 <LCD_moveCursor+0x66>
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	0b c0       	rjmp	.+22     	; 0x2176 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	80 5c       	subi	r24, 0xC0	; 192
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	80 5f       	subi	r24, 0xF0	; 240
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	80 5b       	subi	r24, 0xB0	; 176
    2174:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_sendCommand>
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <LCD_displayStringRowColumn+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LCD_displayStringRowColumn+0x8>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6a 83       	std	Y+2, r22	; 0x02
    219e:	5c 83       	std	Y+4, r21	; 0x04
    21a0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	6a 81       	ldd	r22, Y+2	; 0x02
    21a6:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	62 97       	sbiw	r28, 0x12	; 18
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	9a 8b       	std	Y+18, r25	; 0x12
    21d6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21d8:	89 89       	ldd	r24, Y+17	; 0x11
    21da:	9a 89       	ldd	r25, Y+18	; 0x12
    21dc:	9e 01       	movw	r18, r28
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	b9 01       	movw	r22, r18
    21e4:	4a e0       	ldi	r20, 0x0A	; 10
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <itoa>
   LCD_displayString(buff); /* Display the string */
    21ec:	ce 01       	movw	r24, r28
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
}
    21f4:	62 96       	adiw	r28, 0x12	; 18
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_sendCommand>
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <main>:
#include "avr/io.h"
#include "Timer.h"
void read_password(uint8*password);
void send_password(uint8*password);
int main(void)
{
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	cc 5c       	subi	r28, 0xCC	; 204
    2228:	d0 40       	sbci	r29, 0x00	; 0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
	unsigned char password[5];
	unsigned char check_password[5];
	volatile unsigned char check_result=0;
    2234:	fe 01       	movw	r30, r28
    2236:	eb 54       	subi	r30, 0x4B	; 75
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	10 82       	st	Z, r1
	TimerConfig Timer0_Config = {Normal,F_CPU_1024,0,0};
    223c:	ce 01       	movw	r24, r28
    223e:	8a 54       	subi	r24, 0x4A	; 74
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	cd 53       	subi	r28, 0x3D	; 61
    2244:	df 4f       	sbci	r29, 0xFF	; 255
    2246:	99 83       	std	Y+1, r25	; 0x01
    2248:	88 83       	st	Y, r24
    224a:	c3 5c       	subi	r28, 0xC3	; 195
    224c:	d0 40       	sbci	r29, 0x00	; 0
    224e:	89 e2       	ldi	r24, 0x29	; 41
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	cb 53       	subi	r28, 0x3B	; 59
    2254:	df 4f       	sbci	r29, 0xFF	; 255
    2256:	99 83       	std	Y+1, r25	; 0x01
    2258:	88 83       	st	Y, r24
    225a:	c5 5c       	subi	r28, 0xC5	; 197
    225c:	d0 40       	sbci	r29, 0x00	; 0
    225e:	96 e0       	ldi	r25, 0x06	; 6
    2260:	c9 53       	subi	r28, 0x39	; 57
    2262:	df 4f       	sbci	r29, 0xFF	; 255
    2264:	98 83       	st	Y, r25
    2266:	c7 5c       	subi	r28, 0xC7	; 199
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	cb 53       	subi	r28, 0x3B	; 59
    226c:	df 4f       	sbci	r29, 0xFF	; 255
    226e:	e8 81       	ld	r30, Y
    2270:	f9 81       	ldd	r31, Y+1	; 0x01
    2272:	c5 5c       	subi	r28, 0xC5	; 197
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	00 80       	ld	r0, Z
    2278:	cb 53       	subi	r28, 0x3B	; 59
    227a:	df 4f       	sbci	r29, 0xFF	; 255
    227c:	88 81       	ld	r24, Y
    227e:	99 81       	ldd	r25, Y+1	; 0x01
    2280:	c5 5c       	subi	r28, 0xC5	; 197
    2282:	d0 40       	sbci	r29, 0x00	; 0
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	cb 53       	subi	r28, 0x3B	; 59
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	99 83       	std	Y+1, r25	; 0x01
    228c:	88 83       	st	Y, r24
    228e:	c5 5c       	subi	r28, 0xC5	; 197
    2290:	d0 40       	sbci	r29, 0x00	; 0
    2292:	cd 53       	subi	r28, 0x3D	; 61
    2294:	df 4f       	sbci	r29, 0xFF	; 255
    2296:	e8 81       	ld	r30, Y
    2298:	f9 81       	ldd	r31, Y+1	; 0x01
    229a:	c3 5c       	subi	r28, 0xC3	; 195
    229c:	d0 40       	sbci	r29, 0x00	; 0
    229e:	00 82       	st	Z, r0
    22a0:	cd 53       	subi	r28, 0x3D	; 61
    22a2:	df 4f       	sbci	r29, 0xFF	; 255
    22a4:	88 81       	ld	r24, Y
    22a6:	99 81       	ldd	r25, Y+1	; 0x01
    22a8:	c3 5c       	subi	r28, 0xC3	; 195
    22aa:	d0 40       	sbci	r29, 0x00	; 0
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	cd 53       	subi	r28, 0x3D	; 61
    22b0:	df 4f       	sbci	r29, 0xFF	; 255
    22b2:	99 83       	std	Y+1, r25	; 0x01
    22b4:	88 83       	st	Y, r24
    22b6:	c3 5c       	subi	r28, 0xC3	; 195
    22b8:	d0 40       	sbci	r29, 0x00	; 0
    22ba:	c9 53       	subi	r28, 0x39	; 57
    22bc:	df 4f       	sbci	r29, 0xFF	; 255
    22be:	98 81       	ld	r25, Y
    22c0:	c7 5c       	subi	r28, 0xC7	; 199
    22c2:	d0 40       	sbci	r29, 0x00	; 0
    22c4:	91 50       	subi	r25, 0x01	; 1
    22c6:	c9 53       	subi	r28, 0x39	; 57
    22c8:	df 4f       	sbci	r29, 0xFF	; 255
    22ca:	98 83       	st	Y, r25
    22cc:	c7 5c       	subi	r28, 0xC7	; 199
    22ce:	d0 40       	sbci	r29, 0x00	; 0
    22d0:	c9 53       	subi	r28, 0x39	; 57
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	e8 81       	ld	r30, Y
    22d6:	c7 5c       	subi	r28, 0xC7	; 199
    22d8:	d0 40       	sbci	r29, 0x00	; 0
    22da:	ee 23       	and	r30, r30
    22dc:	31 f6       	brne	.-116    	; 0x226a <main+0x50>
	Timer0_Init(&Timer0_Config);
    22de:	ce 01       	movw	r24, r28
    22e0:	8a 54       	subi	r24, 0x4A	; 74
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Timer0_Init>
	LCD_init();
    22e8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_init>
	UART_Config uart_config = {9600,ASYNC,BIT1,DISABLED};
    22ec:	ce 01       	movw	r24, r28
    22ee:	84 54       	subi	r24, 0x44	; 68
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	c8 53       	subi	r28, 0x38	; 56
    22f4:	df 4f       	sbci	r29, 0xFF	; 255
    22f6:	99 83       	std	Y+1, r25	; 0x01
    22f8:	88 83       	st	Y, r24
    22fa:	c8 5c       	subi	r28, 0xC8	; 200
    22fc:	d0 40       	sbci	r29, 0x00	; 0
    22fe:	82 e2       	ldi	r24, 0x22	; 34
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	c6 53       	subi	r28, 0x36	; 54
    2304:	df 4f       	sbci	r29, 0xFF	; 255
    2306:	99 83       	std	Y+1, r25	; 0x01
    2308:	88 83       	st	Y, r24
    230a:	ca 5c       	subi	r28, 0xCA	; 202
    230c:	d0 40       	sbci	r29, 0x00	; 0
    230e:	97 e0       	ldi	r25, 0x07	; 7
    2310:	c4 53       	subi	r28, 0x34	; 52
    2312:	df 4f       	sbci	r29, 0xFF	; 255
    2314:	98 83       	st	Y, r25
    2316:	cc 5c       	subi	r28, 0xCC	; 204
    2318:	d0 40       	sbci	r29, 0x00	; 0
    231a:	c6 53       	subi	r28, 0x36	; 54
    231c:	df 4f       	sbci	r29, 0xFF	; 255
    231e:	e8 81       	ld	r30, Y
    2320:	f9 81       	ldd	r31, Y+1	; 0x01
    2322:	ca 5c       	subi	r28, 0xCA	; 202
    2324:	d0 40       	sbci	r29, 0x00	; 0
    2326:	00 80       	ld	r0, Z
    2328:	c6 53       	subi	r28, 0x36	; 54
    232a:	df 4f       	sbci	r29, 0xFF	; 255
    232c:	88 81       	ld	r24, Y
    232e:	99 81       	ldd	r25, Y+1	; 0x01
    2330:	ca 5c       	subi	r28, 0xCA	; 202
    2332:	d0 40       	sbci	r29, 0x00	; 0
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	c6 53       	subi	r28, 0x36	; 54
    2338:	df 4f       	sbci	r29, 0xFF	; 255
    233a:	99 83       	std	Y+1, r25	; 0x01
    233c:	88 83       	st	Y, r24
    233e:	ca 5c       	subi	r28, 0xCA	; 202
    2340:	d0 40       	sbci	r29, 0x00	; 0
    2342:	c8 53       	subi	r28, 0x38	; 56
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	e8 81       	ld	r30, Y
    2348:	f9 81       	ldd	r31, Y+1	; 0x01
    234a:	c8 5c       	subi	r28, 0xC8	; 200
    234c:	d0 40       	sbci	r29, 0x00	; 0
    234e:	00 82       	st	Z, r0
    2350:	c8 53       	subi	r28, 0x38	; 56
    2352:	df 4f       	sbci	r29, 0xFF	; 255
    2354:	88 81       	ld	r24, Y
    2356:	99 81       	ldd	r25, Y+1	; 0x01
    2358:	c8 5c       	subi	r28, 0xC8	; 200
    235a:	d0 40       	sbci	r29, 0x00	; 0
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	c8 53       	subi	r28, 0x38	; 56
    2360:	df 4f       	sbci	r29, 0xFF	; 255
    2362:	99 83       	std	Y+1, r25	; 0x01
    2364:	88 83       	st	Y, r24
    2366:	c8 5c       	subi	r28, 0xC8	; 200
    2368:	d0 40       	sbci	r29, 0x00	; 0
    236a:	c4 53       	subi	r28, 0x34	; 52
    236c:	df 4f       	sbci	r29, 0xFF	; 255
    236e:	98 81       	ld	r25, Y
    2370:	cc 5c       	subi	r28, 0xCC	; 204
    2372:	d0 40       	sbci	r29, 0x00	; 0
    2374:	91 50       	subi	r25, 0x01	; 1
    2376:	c4 53       	subi	r28, 0x34	; 52
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	98 83       	st	Y, r25
    237c:	cc 5c       	subi	r28, 0xCC	; 204
    237e:	d0 40       	sbci	r29, 0x00	; 0
    2380:	c4 53       	subi	r28, 0x34	; 52
    2382:	df 4f       	sbci	r29, 0xFF	; 255
    2384:	e8 81       	ld	r30, Y
    2386:	cc 5c       	subi	r28, 0xCC	; 204
    2388:	d0 40       	sbci	r29, 0x00	; 0
    238a:	ee 23       	and	r30, r30
    238c:	31 f6       	brne	.-116    	; 0x231a <main+0x100>
	UART_init(&uart_config);
    238e:	ce 01       	movw	r24, r28
    2390:	84 54       	subi	r24, 0x44	; 68
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	0e 94 af 1b 	call	0x375e	; 0x375e <UART_init>
	SREG |= (1<<7);
    2398:	af e5       	ldi	r26, 0x5F	; 95
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	ef e5       	ldi	r30, 0x5F	; 95
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 68       	ori	r24, 0x80	; 128
    23a4:	8c 93       	st	X, r24
    23a6:	fe 01       	movw	r30, r28
    23a8:	eb 55       	subi	r30, 0x5B	; 91
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	aa ef       	ldi	r26, 0xFA	; 250
    23b2:	b3 e4       	ldi	r27, 0x43	; 67
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	8e 01       	movw	r16, r28
    23be:	0f 55       	subi	r16, 0x5F	; 95
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	eb 55       	subi	r30, 0x5B	; 91
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	f8 01       	movw	r30, r16
    23e2:	80 83       	st	Z, r24
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	a2 83       	std	Z+2, r26	; 0x02
    23e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 55       	subi	r30, 0x5F	; 95
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	44 f4       	brge	.+16     	; 0x2418 <main+0x1fe>
		__ticks = 1;
    2408:	fe 01       	movw	r30, r28
    240a:	e1 56       	subi	r30, 0x61	; 97
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	64 c0       	rjmp	.+200    	; 0x24e0 <main+0x2c6>
	else if (__tmp > 65535)
    2418:	fe 01       	movw	r30, r28
    241a:	ef 55       	subi	r30, 0x5F	; 95
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	0c f0       	brlt	.+2      	; 0x2438 <main+0x21e>
    2436:	43 c0       	rjmp	.+134    	; 0x24be <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	fe 01       	movw	r30, r28
    243a:	eb 55       	subi	r30, 0x5B	; 91
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e2       	ldi	r20, 0x20	; 32
    244c:	51 e4       	ldi	r21, 0x41	; 65
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8e 01       	movw	r16, r28
    2458:	01 56       	subi	r16, 0x61	; 97
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	f8 01       	movw	r30, r16
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	1f c0       	rjmp	.+62     	; 0x24ae <main+0x294>
    2470:	fe 01       	movw	r30, r28
    2472:	e3 56       	subi	r30, 0x63	; 99
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	88 ec       	ldi	r24, 0xC8	; 200
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	fe 01       	movw	r30, r28
    2480:	e3 56       	subi	r30, 0x63	; 99
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <main+0x26e>
    248c:	fe 01       	movw	r30, r28
    248e:	e3 56       	subi	r30, 0x63	; 99
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	de 01       	movw	r26, r28
    2498:	a1 56       	subi	r26, 0x61	; 97
    249a:	bf 4f       	sbci	r27, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	e1 56       	subi	r30, 0x61	; 97
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	9c 93       	st	X, r25
    24ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e1 56       	subi	r30, 0x61	; 97
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	d1 f6       	brne	.-76     	; 0x2470 <main+0x256>
    24bc:	27 c0       	rjmp	.+78     	; 0x250c <main+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	8e 01       	movw	r16, r28
    24c0:	01 56       	subi	r16, 0x61	; 97
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 55       	subi	r30, 0x5F	; 95
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	f8 01       	movw	r30, r16
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	de 01       	movw	r26, r28
    24e2:	a5 56       	subi	r26, 0x65	; 101
    24e4:	bf 4f       	sbci	r27, 0xFF	; 255
    24e6:	fe 01       	movw	r30, r28
    24e8:	e1 56       	subi	r30, 0x61	; 97
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	8d 93       	st	X+, r24
    24f2:	9c 93       	st	X, r25
    24f4:	fe 01       	movw	r30, r28
    24f6:	e5 56       	subi	r30, 0x65	; 101
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <main+0x2e4>
    2502:	fe 01       	movw	r30, r28
    2504:	e5 56       	subi	r30, 0x65	; 101
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
	//while(UART_recieveByte()!=MC2_READY);
	_delay_ms(500); // delay to wait for MC2 to be ready
	do
	{
		LCD_clearScreen();
    250c:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
		LCD_displayString("Enter Password");
    2510:	80 e6       	ldi	r24, 0x60	; 96
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
		LCD_moveCursor(1,0);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
		read_password(password);
    2520:	ce 01       	movw	r24, r28
    2522:	85 55       	subi	r24, 0x55	; 85
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_password>
    252a:	fe 01       	movw	r30, r28
    252c:	e9 56       	subi	r30, 0x69	; 105
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	aa ef       	ldi	r26, 0xFA	; 250
    2536:	b3 e4       	ldi	r27, 0x43	; 67
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	8e 01       	movw	r16, r28
    2542:	0d 56       	subi	r16, 0x6D	; 109
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	fe 01       	movw	r30, r28
    2548:	e9 56       	subi	r30, 0x69	; 105
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	80 83       	st	Z, r24
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	a2 83       	std	Z+2, r26	; 0x02
    256c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    256e:	fe 01       	movw	r30, r28
    2570:	ed 56       	subi	r30, 0x6D	; 109
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2588:	88 23       	and	r24, r24
    258a:	44 f4       	brge	.+16     	; 0x259c <main+0x382>
		__ticks = 1;
    258c:	fe 01       	movw	r30, r28
    258e:	ef 56       	subi	r30, 0x6F	; 111
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    259a:	64 c0       	rjmp	.+200    	; 0x2664 <main+0x44a>
	else if (__tmp > 65535)
    259c:	fe 01       	movw	r30, r28
    259e:	ed 56       	subi	r30, 0x6D	; 109
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <main+0x3a2>
    25ba:	43 c0       	rjmp	.+134    	; 0x2642 <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25bc:	fe 01       	movw	r30, r28
    25be:	e9 56       	subi	r30, 0x69	; 105
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8e 01       	movw	r16, r28
    25dc:	0f 56       	subi	r16, 0x6F	; 111
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	f8 01       	movw	r30, r16
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
    25f2:	1f c0       	rjmp	.+62     	; 0x2632 <main+0x418>
    25f4:	fe 01       	movw	r30, r28
    25f6:	e1 57       	subi	r30, 0x71	; 113
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	fe 01       	movw	r30, r28
    2604:	e1 57       	subi	r30, 0x71	; 113
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <main+0x3f2>
    2610:	fe 01       	movw	r30, r28
    2612:	e1 57       	subi	r30, 0x71	; 113
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261a:	de 01       	movw	r26, r28
    261c:	af 56       	subi	r26, 0x6F	; 111
    261e:	bf 4f       	sbci	r27, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	ef 56       	subi	r30, 0x6F	; 111
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	11 96       	adiw	r26, 0x01	; 1
    262e:	9c 93       	st	X, r25
    2630:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	fe 01       	movw	r30, r28
    2634:	ef 56       	subi	r30, 0x6F	; 111
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	d1 f6       	brne	.-76     	; 0x25f4 <main+0x3da>
    2640:	27 c0       	rjmp	.+78     	; 0x2690 <main+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	8e 01       	movw	r16, r28
    2644:	0f 56       	subi	r16, 0x6F	; 111
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	fe 01       	movw	r30, r28
    264a:	ed 56       	subi	r30, 0x6D	; 109
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	f8 01       	movw	r30, r16
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	de 01       	movw	r26, r28
    2666:	a3 57       	subi	r26, 0x73	; 115
    2668:	bf 4f       	sbci	r27, 0xFF	; 255
    266a:	fe 01       	movw	r30, r28
    266c:	ef 56       	subi	r30, 0x6F	; 111
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	8d 93       	st	X+, r24
    2676:	9c 93       	st	X, r25
    2678:	fe 01       	movw	r30, r28
    267a:	e3 57       	subi	r30, 0x73	; 115
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <main+0x468>
    2686:	fe 01       	movw	r30, r28
    2688:	e3 57       	subi	r30, 0x73	; 115
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
		_delay_ms(500);
		send_password(password);
    2690:	ce 01       	movw	r24, r28
    2692:	85 55       	subi	r24, 0x55	; 85
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	0e 94 14 1b 	call	0x3628	; 0x3628 <send_password>
		LCD_clearScreen();
    269a:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
		LCD_displayString("Re-enter Password");
    269e:	8f e6       	ldi	r24, 0x6F	; 111
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
		LCD_moveCursor(1,0);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
		read_password(check_password);
    26ae:	ce 01       	movw	r24, r28
    26b0:	80 55       	subi	r24, 0x50	; 80
    26b2:	9f 4f       	sbci	r25, 0xFF	; 255
    26b4:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_password>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e7 57       	subi	r30, 0x77	; 119
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	aa ef       	ldi	r26, 0xFA	; 250
    26c4:	b3 e4       	ldi	r27, 0x43	; 67
    26c6:	80 83       	st	Z, r24
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	a2 83       	std	Z+2, r26	; 0x02
    26cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ce:	8e 01       	movw	r16, r28
    26d0:	0b 57       	subi	r16, 0x7B	; 123
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e7 57       	subi	r30, 0x77	; 119
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a ef       	ldi	r20, 0xFA	; 250
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26fc:	fe 01       	movw	r30, r28
    26fe:	eb 57       	subi	r30, 0x7B	; 123
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	44 f4       	brge	.+16     	; 0x272a <main+0x510>
		__ticks = 1;
    271a:	fe 01       	movw	r30, r28
    271c:	ed 57       	subi	r30, 0x7D	; 125
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	64 c0       	rjmp	.+200    	; 0x27f2 <main+0x5d8>
	else if (__tmp > 65535)
    272a:	fe 01       	movw	r30, r28
    272c:	eb 57       	subi	r30, 0x7B	; 123
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	0c f0       	brlt	.+2      	; 0x274a <main+0x530>
    2748:	43 c0       	rjmp	.+134    	; 0x27d0 <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	fe 01       	movw	r30, r28
    274c:	e7 57       	subi	r30, 0x77	; 119
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8e 01       	movw	r16, r28
    276a:	0d 57       	subi	r16, 0x7D	; 125
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	f8 01       	movw	r30, r16
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	1f c0       	rjmp	.+62     	; 0x27c0 <main+0x5a6>
    2782:	fe 01       	movw	r30, r28
    2784:	ef 57       	subi	r30, 0x7F	; 127
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	fe 01       	movw	r30, r28
    2792:	ef 57       	subi	r30, 0x7F	; 127
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <main+0x580>
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 57       	subi	r30, 0x7F	; 127
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	de 01       	movw	r26, r28
    27aa:	ad 57       	subi	r26, 0x7D	; 125
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	ed 57       	subi	r30, 0x7D	; 125
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	11 96       	adiw	r26, 0x01	; 1
    27bc:	9c 93       	st	X, r25
    27be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	fe 01       	movw	r30, r28
    27c2:	ed 57       	subi	r30, 0x7D	; 125
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	d1 f6       	brne	.-76     	; 0x2782 <main+0x568>
    27ce:	27 c0       	rjmp	.+78     	; 0x281e <main+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	8e 01       	movw	r16, r28
    27d2:	0d 57       	subi	r16, 0x7D	; 125
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 57       	subi	r30, 0x7B	; 123
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	f8 01       	movw	r30, r16
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	de 01       	movw	r26, r28
    27f4:	a1 58       	subi	r26, 0x81	; 129
    27f6:	bf 4f       	sbci	r27, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 57       	subi	r30, 0x7D	; 125
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	8d 93       	st	X+, r24
    2804:	9c 93       	st	X, r25
    2806:	fe 01       	movw	r30, r28
    2808:	e1 58       	subi	r30, 0x81	; 129
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <main+0x5f6>
    2814:	fe 01       	movw	r30, r28
    2816:	e1 58       	subi	r30, 0x81	; 129
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
		_delay_ms(500);
		send_password(check_password);
    281e:	ce 01       	movw	r24, r28
    2820:	80 55       	subi	r24, 0x50	; 80
    2822:	9f 4f       	sbci	r25, 0xFF	; 255
    2824:	0e 94 14 1b 	call	0x3628	; 0x3628 <send_password>
		//_delay_ms(500);
		check_result=UART_recieveByte();
    2828:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    282c:	fe 01       	movw	r30, r28
    282e:	eb 54       	subi	r30, 0x4B	; 75
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 83       	st	Z, r24
		if(check_result!=1)
    2834:	fe 01       	movw	r30, r28
    2836:	eb 54       	subi	r30, 0x4B	; 75
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	09 f4       	brne	.+2      	; 0x2842 <main+0x628>
    2840:	ba c0       	rjmp	.+372    	; 0x29b6 <main+0x79c>
		{
			LCD_clearScreen();
    2842:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
			LCD_displayString("invalid password");
    2846:	81 e8       	ldi	r24, 0x81	; 129
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
    284e:	fe 01       	movw	r30, r28
    2850:	e5 58       	subi	r30, 0x85	; 133
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	aa ef       	ldi	r26, 0xFA	; 250
    285a:	b3 e4       	ldi	r27, 0x43	; 67
    285c:	80 83       	st	Z, r24
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	a2 83       	std	Z+2, r26	; 0x02
    2862:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	8e 01       	movw	r16, r28
    2866:	09 58       	subi	r16, 0x89	; 137
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	e5 58       	subi	r30, 0x85	; 133
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a ef       	ldi	r20, 0xFA	; 250
    287e:	54 e4       	ldi	r21, 0x44	; 68
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	a2 83       	std	Z+2, r26	; 0x02
    2890:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2892:	fe 01       	movw	r30, r28
    2894:	e9 58       	subi	r30, 0x89	; 137
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e8       	ldi	r20, 0x80	; 128
    28a6:	5f e3       	ldi	r21, 0x3F	; 63
    28a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	44 f4       	brge	.+16     	; 0x28c0 <main+0x6a6>
		__ticks = 1;
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 58       	subi	r30, 0x8B	; 139
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	64 c0       	rjmp	.+200    	; 0x2988 <main+0x76e>
	else if (__tmp > 65535)
    28c0:	fe 01       	movw	r30, r28
    28c2:	e9 58       	subi	r30, 0x89	; 137
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	3f ef       	ldi	r19, 0xFF	; 255
    28d2:	4f e7       	ldi	r20, 0x7F	; 127
    28d4:	57 e4       	ldi	r21, 0x47	; 71
    28d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28da:	18 16       	cp	r1, r24
    28dc:	0c f0       	brlt	.+2      	; 0x28e0 <main+0x6c6>
    28de:	43 c0       	rjmp	.+134    	; 0x2966 <main+0x74c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 58       	subi	r30, 0x85	; 133
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	8e 01       	movw	r16, r28
    2900:	0b 58       	subi	r16, 0x8B	; 139
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	f8 01       	movw	r30, r16
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	80 83       	st	Z, r24
    2916:	1f c0       	rjmp	.+62     	; 0x2956 <main+0x73c>
    2918:	fe 01       	movw	r30, r28
    291a:	ed 58       	subi	r30, 0x8D	; 141
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	88 ec       	ldi	r24, 0xC8	; 200
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	fe 01       	movw	r30, r28
    2928:	ed 58       	subi	r30, 0x8D	; 141
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <main+0x716>
    2934:	fe 01       	movw	r30, r28
    2936:	ed 58       	subi	r30, 0x8D	; 141
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	de 01       	movw	r26, r28
    2940:	ab 58       	subi	r26, 0x8B	; 139
    2942:	bf 4f       	sbci	r27, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	eb 58       	subi	r30, 0x8B	; 139
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	11 96       	adiw	r26, 0x01	; 1
    2952:	9c 93       	st	X, r25
    2954:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	fe 01       	movw	r30, r28
    2958:	eb 58       	subi	r30, 0x8B	; 139
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	d1 f6       	brne	.-76     	; 0x2918 <main+0x6fe>
    2964:	28 c0       	rjmp	.+80     	; 0x29b6 <main+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	8e 01       	movw	r16, r28
    2968:	0b 58       	subi	r16, 0x8B	; 139
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	e9 58       	subi	r30, 0x89	; 137
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	f8 01       	movw	r30, r16
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
    2988:	de 01       	movw	r26, r28
    298a:	af 58       	subi	r26, 0x8F	; 143
    298c:	bf 4f       	sbci	r27, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	eb 58       	subi	r30, 0x8B	; 139
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	11 96       	adiw	r26, 0x01	; 1
    299a:	9c 93       	st	X, r25
    299c:	8e 93       	st	-X, r24
    299e:	fe 01       	movw	r30, r28
    29a0:	ef 58       	subi	r30, 0x8F	; 143
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <main+0x78e>
    29ac:	fe 01       	movw	r30, r28
    29ae:	ef 58       	subi	r30, 0x8F	; 143
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	80 83       	st	Z, r24
			_delay_ms(500);
		}
	}
	while(check_result!=1);
    29b6:	fe 01       	movw	r30, r28
    29b8:	eb 54       	subi	r30, 0x4B	; 75
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <main+0x7aa>
    29c2:	a4 cd       	rjmp	.-1208   	; 0x250c <main+0x2f2>
	LCD_clearScreen();
    29c4:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
	LCD_displayString("Correct Password");
    29c8:	82 e9       	ldi	r24, 0x92	; 146
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
    29d0:	fe 01       	movw	r30, r28
    29d2:	e3 59       	subi	r30, 0x93	; 147
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	aa e7       	ldi	r26, 0x7A	; 122
    29dc:	b4 e4       	ldi	r27, 0x44	; 68
    29de:	80 83       	st	Z, r24
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	a2 83       	std	Z+2, r26	; 0x02
    29e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	8e 01       	movw	r16, r28
    29e8:	07 59       	subi	r16, 0x97	; 151
    29ea:	1f 4f       	sbci	r17, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	e3 59       	subi	r30, 0x93	; 147
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a ef       	ldi	r20, 0xFA	; 250
    2a00:	54 e4       	ldi	r21, 0x44	; 68
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 83       	st	Z, r24
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a14:	fe 01       	movw	r30, r28
    2a16:	e7 59       	subi	r30, 0x97	; 151
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	44 f4       	brge	.+16     	; 0x2a42 <main+0x828>
		__ticks = 1;
    2a32:	fe 01       	movw	r30, r28
    2a34:	e9 59       	subi	r30, 0x99	; 153
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
    2a40:	64 c0       	rjmp	.+200    	; 0x2b0a <main+0x8f0>
	else if (__tmp > 65535)
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 59       	subi	r30, 0x97	; 151
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	3f ef       	ldi	r19, 0xFF	; 255
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	57 e4       	ldi	r21, 0x47	; 71
    2a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <main+0x848>
    2a60:	43 c0       	rjmp	.+134    	; 0x2ae8 <main+0x8ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	fe 01       	movw	r30, r28
    2a64:	e3 59       	subi	r30, 0x93	; 147
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8e 01       	movw	r16, r28
    2a82:	09 59       	subi	r16, 0x99	; 153
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	1f c0       	rjmp	.+62     	; 0x2ad8 <main+0x8be>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	eb 59       	subi	r30, 0x9B	; 155
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	eb 59       	subi	r30, 0x9B	; 155
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <main+0x898>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	eb 59       	subi	r30, 0x9B	; 155
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	de 01       	movw	r26, r28
    2ac2:	a9 59       	subi	r26, 0x99	; 153
    2ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e9 59       	subi	r30, 0x99	; 153
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 59       	subi	r30, 0x99	; 153
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	d1 f6       	brne	.-76     	; 0x2a9a <main+0x880>
    2ae6:	27 c0       	rjmp	.+78     	; 0x2b36 <main+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	8e 01       	movw	r16, r28
    2aea:	09 59       	subi	r16, 0x99	; 153
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	fe 01       	movw	r30, r28
    2af0:	e7 59       	subi	r30, 0x97	; 151
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	de 01       	movw	r26, r28
    2b0c:	ad 59       	subi	r26, 0x9D	; 157
    2b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e9 59       	subi	r30, 0x99	; 153
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	8d 93       	st	X+, r24
    2b1c:	9c 93       	st	X, r25
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ed 59       	subi	r30, 0x9D	; 157
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <main+0x90e>
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ed 59       	subi	r30, 0x9D	; 157
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	80 83       	st	Z, r24
	_delay_ms(1000);
	while(1){
		LCD_clearScreen();
    2b36:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"- : Change Password");
    2b3a:	23 ea       	ldi	r18, 0xA3	; 163
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	a9 01       	movw	r20, r18
    2b44:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"+ : Open Door");
    2b48:	27 eb       	ldi	r18, 0xB7	; 183
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	a9 01       	movw	r20, r18
    2b52:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_displayStringRowColumn>
		uint8 command=KEYPAD_getPressedKey();
    2b56:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <KEYPAD_getPressedKey>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e6 55       	subi	r30, 0x56	; 86
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 83       	st	Z, r24
    2b62:	fe 01       	movw	r30, r28
    2b64:	e1 5a       	subi	r30, 0xA1	; 161
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	aa ef       	ldi	r26, 0xFA	; 250
    2b6e:	b3 e4       	ldi	r27, 0x43	; 67
    2b70:	80 83       	st	Z, r24
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	8e 01       	movw	r16, r28
    2b7a:	05 5a       	subi	r16, 0xA5	; 165
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e1 5a       	subi	r30, 0xA1	; 161
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	80 83       	st	Z, r24
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	a2 83       	std	Z+2, r26	; 0x02
    2ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e5 5a       	subi	r30, 0xA5	; 165
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	44 f4       	brge	.+16     	; 0x2bd4 <main+0x9ba>
		__ticks = 1;
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e7 5a       	subi	r30, 0xA7	; 167
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	64 c0       	rjmp	.+200    	; 0x2c9c <main+0xa82>
	else if (__tmp > 65535)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e5 5a       	subi	r30, 0xA5	; 165
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	0c f0       	brlt	.+2      	; 0x2bf4 <main+0x9da>
    2bf2:	43 c0       	rjmp	.+134    	; 0x2c7a <main+0xa60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e1 5a       	subi	r30, 0xA1	; 161
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e2       	ldi	r20, 0x20	; 32
    2c08:	51 e4       	ldi	r21, 0x41	; 65
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8e 01       	movw	r16, r28
    2c14:	07 5a       	subi	r16, 0xA7	; 167
    2c16:	1f 4f       	sbci	r17, 0xFF	; 255
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	f8 01       	movw	r30, r16
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	80 83       	st	Z, r24
    2c2a:	1f c0       	rjmp	.+62     	; 0x2c6a <main+0xa50>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e9 5a       	subi	r30, 0xA9	; 169
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	88 ec       	ldi	r24, 0xC8	; 200
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e9 5a       	subi	r30, 0xA9	; 169
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <main+0xa2a>
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e9 5a       	subi	r30, 0xA9	; 169
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	de 01       	movw	r26, r28
    2c54:	a7 5a       	subi	r26, 0xA7	; 167
    2c56:	bf 4f       	sbci	r27, 0xFF	; 255
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e7 5a       	subi	r30, 0xA7	; 167
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	11 96       	adiw	r26, 0x01	; 1
    2c66:	9c 93       	st	X, r25
    2c68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e7 5a       	subi	r30, 0xA7	; 167
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	91 81       	ldd	r25, Z+1	; 0x01
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	d1 f6       	brne	.-76     	; 0x2c2c <main+0xa12>
    2c78:	27 c0       	rjmp	.+78     	; 0x2cc8 <main+0xaae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7a:	8e 01       	movw	r16, r28
    2c7c:	07 5a       	subi	r16, 0xA7	; 167
    2c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e5 5a       	subi	r30, 0xA5	; 165
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	f8 01       	movw	r30, r16
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	de 01       	movw	r26, r28
    2c9e:	ab 5a       	subi	r26, 0xAB	; 171
    2ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e7 5a       	subi	r30, 0xA7	; 167
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	8d 93       	st	X+, r24
    2cae:	9c 93       	st	X, r25
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	eb 5a       	subi	r30, 0xAB	; 171
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 81       	ld	r24, Z
    2cb8:	91 81       	ldd	r25, Z+1	; 0x01
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <main+0xaa0>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	eb 5a       	subi	r30, 0xAB	; 171
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
		_delay_ms(500);
		UART_sendByte(command);
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e6 55       	subi	r30, 0x56	; 86
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ef 5a       	subi	r30, 0xAF	; 175
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a8 ec       	ldi	r26, 0xC8	; 200
    2ce0:	b2 e4       	ldi	r27, 0x42	; 66
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	8e 01       	movw	r16, r28
    2cec:	03 5b       	subi	r16, 0xB3	; 179
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 5a       	subi	r30, 0xAF	; 175
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	4a ef       	ldi	r20, 0xFA	; 250
    2d04:	54 e4       	ldi	r21, 0x44	; 68
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	f8 01       	movw	r30, r16
    2d10:	80 83       	st	Z, r24
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	a2 83       	std	Z+2, r26	; 0x02
    2d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e3 5b       	subi	r30, 0xB3	; 179
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	44 f4       	brge	.+16     	; 0x2d46 <main+0xb2c>
		__ticks = 1;
    2d36:	fe 01       	movw	r30, r28
    2d38:	e5 5b       	subi	r30, 0xB5	; 181
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	80 83       	st	Z, r24
    2d44:	64 c0       	rjmp	.+200    	; 0x2e0e <main+0xbf4>
	else if (__tmp > 65535)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e3 5b       	subi	r30, 0xB3	; 179
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <main+0xb4c>
    2d64:	43 c0       	rjmp	.+134    	; 0x2dec <main+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	fe 01       	movw	r30, r28
    2d68:	ef 5a       	subi	r30, 0xAF	; 175
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	60 81       	ld	r22, Z
    2d6e:	71 81       	ldd	r23, Z+1	; 0x01
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8e 01       	movw	r16, r28
    2d86:	05 5b       	subi	r16, 0xB5	; 181
    2d88:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	f8 01       	movw	r30, r16
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    2d9c:	1f c0       	rjmp	.+62     	; 0x2ddc <main+0xbc2>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e7 5b       	subi	r30, 0xB7	; 183
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	88 ec       	ldi	r24, 0xC8	; 200
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
    2dac:	fe 01       	movw	r30, r28
    2dae:	e7 5b       	subi	r30, 0xB7	; 183
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <main+0xb9c>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e7 5b       	subi	r30, 0xB7	; 183
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	de 01       	movw	r26, r28
    2dc6:	a5 5b       	subi	r26, 0xB5	; 181
    2dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e5 5b       	subi	r30, 0xB5	; 181
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	91 81       	ldd	r25, Z+1	; 0x01
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	11 96       	adiw	r26, 0x01	; 1
    2dd8:	9c 93       	st	X, r25
    2dda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e5 5b       	subi	r30, 0xB5	; 181
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	d1 f6       	brne	.-76     	; 0x2d9e <main+0xb84>
    2dea:	28 c0       	rjmp	.+80     	; 0x2e3c <main+0xc22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	8e 01       	movw	r16, r28
    2dee:	05 5b       	subi	r16, 0xB5	; 181
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	e3 5b       	subi	r30, 0xB3	; 179
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	de 01       	movw	r26, r28
    2e10:	a9 5b       	subi	r26, 0xB9	; 185
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	fe 01       	movw	r30, r28
    2e16:	e5 5b       	subi	r30, 0xB5	; 181
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	11 96       	adiw	r26, 0x01	; 1
    2e20:	9c 93       	st	X, r25
    2e22:	8e 93       	st	-X, r24
    2e24:	fe 01       	movw	r30, r28
    2e26:	e9 5b       	subi	r30, 0xB9	; 185
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <main+0xc14>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e9 5b       	subi	r30, 0xB9	; 185
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
		_delay_ms(100);
		if(command=='-')
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e6 55       	subi	r30, 0x56	; 86
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	8d 32       	cpi	r24, 0x2D	; 45
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <main+0xc30>
    2e48:	b2 c1       	rjmp	.+868    	; 0x31ae <main+0xf94>
		{
			do
			{
				LCD_clearScreen();
    2e4a:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("Enter Password");
    2e4e:	80 e6       	ldi	r24, 0x60	; 96
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				LCD_moveCursor(1,0);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
				read_password(password);
    2e5e:	ce 01       	movw	r24, r28
    2e60:	85 55       	subi	r24, 0x55	; 85
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_password>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 5b       	subi	r30, 0xBD	; 189
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	aa ef       	ldi	r26, 0xFA	; 250
    2e74:	b3 e4       	ldi	r27, 0x43	; 67
    2e76:	80 83       	st	Z, r24
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	a2 83       	std	Z+2, r26	; 0x02
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	8e 01       	movw	r16, r28
    2e80:	01 5c       	subi	r16, 0xC1	; 193
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	ed 5b       	subi	r30, 0xBD	; 189
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	80 83       	st	Z, r24
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	a2 83       	std	Z+2, r26	; 0x02
    2eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eac:	fe 01       	movw	r30, r28
    2eae:	ff 96       	adiw	r30, 0x3f	; 63
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec4:	88 23       	and	r24, r24
    2ec6:	2c f4       	brge	.+10     	; 0x2ed2 <main+0xcb8>
		__ticks = 1;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9e af       	std	Y+62, r25	; 0x3e
    2ece:	8d af       	std	Y+61, r24	; 0x3d
    2ed0:	46 c0       	rjmp	.+140    	; 0x2f5e <main+0xd44>
	else if (__tmp > 65535)
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ff 96       	adiw	r30, 0x3f	; 63
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	64 f5       	brge	.+88     	; 0x2f46 <main+0xd2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ed 5b       	subi	r30, 0xBD	; 189
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e af       	std	Y+62, r25	; 0x3e
    2f1a:	8d af       	std	Y+61, r24	; 0x3d
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <main+0xd22>
    2f1e:	88 ec       	ldi	r24, 0xC8	; 200
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c af       	std	Y+60, r25	; 0x3c
    2f24:	8b af       	std	Y+59, r24	; 0x3b
    2f26:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f28:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <main+0xd10>
    2f2e:	9c af       	std	Y+60, r25	; 0x3c
    2f30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e af       	std	Y+62, r25	; 0x3e
    2f3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <main+0xd04>
    2f44:	16 c0       	rjmp	.+44     	; 0x2f72 <main+0xd58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	fe 01       	movw	r30, r28
    2f48:	ff 96       	adiw	r30, 0x3f	; 63
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e af       	std	Y+62, r25	; 0x3e
    2f5c:	8d af       	std	Y+61, r24	; 0x3d
    2f5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f62:	9a af       	std	Y+58, r25	; 0x3a
    2f64:	89 af       	std	Y+57, r24	; 0x39
    2f66:	89 ad       	ldd	r24, Y+57	; 0x39
    2f68:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <main+0xd50>
    2f6e:	9a af       	std	Y+58, r25	; 0x3a
    2f70:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				send_password(password);
    2f72:	ce 01       	movw	r24, r28
    2f74:	85 55       	subi	r24, 0x55	; 85
    2f76:	9f 4f       	sbci	r25, 0xFF	; 255
    2f78:	0e 94 14 1b 	call	0x3628	; 0x3628 <send_password>
				LCD_clearScreen();
    2f7c:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("Re-enter Password");
    2f80:	8f e6       	ldi	r24, 0x6F	; 111
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				LCD_moveCursor(1,0);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
				read_password(check_password);
    2f90:	ce 01       	movw	r24, r28
    2f92:	80 55       	subi	r24, 0x50	; 80
    2f94:	9f 4f       	sbci	r25, 0xFF	; 255
    2f96:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_password>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	aa ef       	ldi	r26, 0xFA	; 250
    2fa0:	b3 e4       	ldi	r27, 0x43	; 67
    2fa2:	8d ab       	std	Y+53, r24	; 0x35
    2fa4:	9e ab       	std	Y+54, r25	; 0x36
    2fa6:	af ab       	std	Y+55, r26	; 0x37
    2fa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6d a9       	ldd	r22, Y+53	; 0x35
    2fac:	7e a9       	ldd	r23, Y+54	; 0x36
    2fae:	8f a9       	ldd	r24, Y+55	; 0x37
    2fb0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a ef       	ldi	r20, 0xFA	; 250
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	89 ab       	std	Y+49, r24	; 0x31
    2fc4:	9a ab       	std	Y+50, r25	; 0x32
    2fc6:	ab ab       	std	Y+51, r26	; 0x33
    2fc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fca:	69 a9       	ldd	r22, Y+49	; 0x31
    2fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fce:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <main+0xdd2>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <main+0xe50>
	else if (__tmp > 65535)
    2fec:	69 a9       	ldd	r22, Y+49	; 0x31
    2fee:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <main+0xe3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6d a9       	ldd	r22, Y+53	; 0x35
    3006:	7e a9       	ldd	r23, Y+54	; 0x36
    3008:	8f a9       	ldd	r24, Y+55	; 0x37
    300a:	98 ad       	ldd	r25, Y+56	; 0x38
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	98 ab       	std	Y+48, r25	; 0x30
    302a:	8f a7       	std	Y+47, r24	; 0x2f
    302c:	0f c0       	rjmp	.+30     	; 0x304c <main+0xe32>
    302e:	88 ec       	ldi	r24, 0xC8	; 200
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9e a7       	std	Y+46, r25	; 0x2e
    3034:	8d a7       	std	Y+45, r24	; 0x2d
    3036:	8d a5       	ldd	r24, Y+45	; 0x2d
    3038:	9e a5       	ldd	r25, Y+46	; 0x2e
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <main+0xe20>
    303e:	9e a7       	std	Y+46, r25	; 0x2e
    3040:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8f a5       	ldd	r24, Y+47	; 0x2f
    3044:	98 a9       	ldd	r25, Y+48	; 0x30
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	98 ab       	std	Y+48, r25	; 0x30
    304a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8f a5       	ldd	r24, Y+47	; 0x2f
    304e:	98 a9       	ldd	r25, Y+48	; 0x30
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <main+0xe14>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <main+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	69 a9       	ldd	r22, Y+49	; 0x31
    3058:	7a a9       	ldd	r23, Y+50	; 0x32
    305a:	8b a9       	ldd	r24, Y+51	; 0x33
    305c:	9c a9       	ldd	r25, Y+52	; 0x34
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
    306a:	8f a5       	ldd	r24, Y+47	; 0x2f
    306c:	98 a9       	ldd	r25, Y+48	; 0x30
    306e:	9c a7       	std	Y+44, r25	; 0x2c
    3070:	8b a7       	std	Y+43, r24	; 0x2b
    3072:	8b a5       	ldd	r24, Y+43	; 0x2b
    3074:	9c a5       	ldd	r25, Y+44	; 0x2c
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <main+0xe5c>
    307a:	9c a7       	std	Y+44, r25	; 0x2c
    307c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				send_password(check_password);
    307e:	ce 01       	movw	r24, r28
    3080:	80 55       	subi	r24, 0x50	; 80
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	0e 94 14 1b 	call	0x3628	; 0x3628 <send_password>
				//_delay_ms(500);
				check_result=UART_recieveByte();
    3088:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    308c:	fe 01       	movw	r30, r28
    308e:	eb 54       	subi	r30, 0x4B	; 75
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 83       	st	Z, r24
				if(check_result!=1)
    3094:	fe 01       	movw	r30, r28
    3096:	eb 54       	subi	r30, 0x4B	; 75
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	81 30       	cpi	r24, 0x01	; 1
    309e:	09 f4       	brne	.+2      	; 0x30a2 <main+0xe88>
    30a0:	78 c0       	rjmp	.+240    	; 0x3192 <main+0xf78>
				{
					LCD_clearScreen();
    30a2:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
					LCD_displayString("invalid password");
    30a6:	81 e8       	ldi	r24, 0x81	; 129
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	aa ef       	ldi	r26, 0xFA	; 250
    30b4:	b3 e4       	ldi	r27, 0x43	; 67
    30b6:	8f a3       	std	Y+39, r24	; 0x27
    30b8:	98 a7       	std	Y+40, r25	; 0x28
    30ba:	a9 a7       	std	Y+41, r26	; 0x29
    30bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	6f a1       	ldd	r22, Y+39	; 0x27
    30c0:	78 a5       	ldd	r23, Y+40	; 0x28
    30c2:	89 a5       	ldd	r24, Y+41	; 0x29
    30c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a ef       	ldi	r20, 0xFA	; 250
    30cc:	54 e4       	ldi	r21, 0x44	; 68
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8b a3       	std	Y+35, r24	; 0x23
    30d8:	9c a3       	std	Y+36, r25	; 0x24
    30da:	ad a3       	std	Y+37, r26	; 0x25
    30dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30de:	6b a1       	ldd	r22, Y+35	; 0x23
    30e0:	7c a1       	ldd	r23, Y+36	; 0x24
    30e2:	8d a1       	ldd	r24, Y+37	; 0x25
    30e4:	9e a1       	ldd	r25, Y+38	; 0x26
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <main+0xee6>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9a a3       	std	Y+34, r25	; 0x22
    30fc:	89 a3       	std	Y+33, r24	; 0x21
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <main+0xf64>
	else if (__tmp > 65535)
    3100:	6b a1       	ldd	r22, Y+35	; 0x23
    3102:	7c a1       	ldd	r23, Y+36	; 0x24
    3104:	8d a1       	ldd	r24, Y+37	; 0x25
    3106:	9e a1       	ldd	r25, Y+38	; 0x26
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <main+0xf50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	6f a1       	ldd	r22, Y+39	; 0x27
    311a:	78 a5       	ldd	r23, Y+40	; 0x28
    311c:	89 a5       	ldd	r24, Y+41	; 0x29
    311e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9a a3       	std	Y+34, r25	; 0x22
    313e:	89 a3       	std	Y+33, r24	; 0x21
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <main+0xf46>
    3142:	88 ec       	ldi	r24, 0xC8	; 200
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	98 a3       	std	Y+32, r25	; 0x20
    3148:	8f 8f       	std	Y+31, r24	; 0x1f
    314a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    314c:	98 a1       	ldd	r25, Y+32	; 0x20
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <main+0xf34>
    3152:	98 a3       	std	Y+32, r25	; 0x20
    3154:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	89 a1       	ldd	r24, Y+33	; 0x21
    3158:	9a a1       	ldd	r25, Y+34	; 0x22
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9a a3       	std	Y+34, r25	; 0x22
    315e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	89 a1       	ldd	r24, Y+33	; 0x21
    3162:	9a a1       	ldd	r25, Y+34	; 0x22
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <main+0xf28>
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <main+0xf78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	6b a1       	ldd	r22, Y+35	; 0x23
    316c:	7c a1       	ldd	r23, Y+36	; 0x24
    316e:	8d a1       	ldd	r24, Y+37	; 0x25
    3170:	9e a1       	ldd	r25, Y+38	; 0x26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9a a3       	std	Y+34, r25	; 0x22
    317c:	89 a3       	std	Y+33, r24	; 0x21
    317e:	89 a1       	ldd	r24, Y+33	; 0x21
    3180:	9a a1       	ldd	r25, Y+34	; 0x22
    3182:	9e 8f       	std	Y+30, r25	; 0x1e
    3184:	8d 8f       	std	Y+29, r24	; 0x1d
    3186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3188:	9e 8d       	ldd	r25, Y+30	; 0x1e
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <main+0xf70>
    318e:	9e 8f       	std	Y+30, r25	; 0x1e
    3190:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
				}
			}
			while(check_result!=1);
    3192:	fe 01       	movw	r30, r28
    3194:	eb 54       	subi	r30, 0x4B	; 75
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	80 81       	ld	r24, Z
    319a:	81 30       	cpi	r24, 0x01	; 1
    319c:	09 f0       	breq	.+2      	; 0x31a0 <main+0xf86>
    319e:	55 ce       	rjmp	.-854    	; 0x2e4a <main+0xc30>
			LCD_clearScreen();
    31a0:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
			LCD_displayString("Password Changed");
    31a4:	85 ec       	ldi	r24, 0xC5	; 197
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
    31ac:	c4 cc       	rjmp	.-1656   	; 0x2b36 <main+0x91c>
		}
		else if(command=='+')
    31ae:	fe 01       	movw	r30, r28
    31b0:	e6 55       	subi	r30, 0x56	; 86
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	80 81       	ld	r24, Z
    31b6:	8b 32       	cpi	r24, 0x2B	; 43
    31b8:	09 f0       	breq	.+2      	; 0x31bc <main+0xfa2>
    31ba:	bd cc       	rjmp	.-1670   	; 0x2b36 <main+0x91c>
		{
			uint8 count=0;
    31bc:	fe 01       	movw	r30, r28
    31be:	e7 55       	subi	r30, 0x57	; 87
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	10 82       	st	Z, r1
			do
			{
				count++;
    31c4:	de 01       	movw	r26, r28
    31c6:	a7 55       	subi	r26, 0x57	; 87
    31c8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ca:	fe 01       	movw	r30, r28
    31cc:	e7 55       	subi	r30, 0x57	; 87
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	8f 5f       	subi	r24, 0xFF	; 255
    31d4:	8c 93       	st	X, r24
				LCD_clearScreen();
    31d6:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("Enter Password");
    31da:	80 e6       	ldi	r24, 0x60	; 96
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				LCD_moveCursor(1,0);
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 85 10 	call	0x210a	; 0x210a <LCD_moveCursor>
				read_password(password);
    31ea:	ce 01       	movw	r24, r28
    31ec:	85 55       	subi	r24, 0x55	; 85
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_password>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	aa ef       	ldi	r26, 0xFA	; 250
    31fa:	b3 e4       	ldi	r27, 0x43	; 67
    31fc:	89 8f       	std	Y+25, r24	; 0x19
    31fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3200:	ab 8f       	std	Y+27, r26	; 0x1b
    3202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	69 8d       	ldd	r22, Y+25	; 0x19
    3206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a ef       	ldi	r20, 0xFA	; 250
    3212:	54 e4       	ldi	r21, 0x44	; 68
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8d 8b       	std	Y+21, r24	; 0x15
    321e:	9e 8b       	std	Y+22, r25	; 0x16
    3220:	af 8b       	std	Y+23, r26	; 0x17
    3222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <main+0x102c>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <main+0x10aa>
	else if (__tmp > 65535)
    3246:	6d 89       	ldd	r22, Y+21	; 0x15
    3248:	7e 89       	ldd	r23, Y+22	; 0x16
    324a:	8f 89       	ldd	r24, Y+23	; 0x17
    324c:	98 8d       	ldd	r25, Y+24	; 0x18
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <main+0x1096>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	69 8d       	ldd	r22, Y+25	; 0x19
    3260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9c 8b       	std	Y+20, r25	; 0x14
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <main+0x108c>
    3288:	88 ec       	ldi	r24, 0xC8	; 200
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9a 8b       	std	Y+18, r25	; 0x12
    328e:	89 8b       	std	Y+17, r24	; 0x11
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	9a 89       	ldd	r25, Y+18	; 0x12
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <main+0x107a>
    3298:	9a 8b       	std	Y+18, r25	; 0x12
    329a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9c 8b       	std	Y+20, r25	; 0x14
    32a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8b 89       	ldd	r24, Y+19	; 0x13
    32a8:	9c 89       	ldd	r25, Y+20	; 0x14
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <main+0x106e>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <main+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6d 89       	ldd	r22, Y+21	; 0x15
    32b2:	7e 89       	ldd	r23, Y+22	; 0x16
    32b4:	8f 89       	ldd	r24, Y+23	; 0x17
    32b6:	98 8d       	ldd	r25, Y+24	; 0x18
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9c 8b       	std	Y+20, r25	; 0x14
    32c2:	8b 8b       	std	Y+19, r24	; 0x13
    32c4:	8b 89       	ldd	r24, Y+19	; 0x13
    32c6:	9c 89       	ldd	r25, Y+20	; 0x14
    32c8:	98 8b       	std	Y+16, r25	; 0x10
    32ca:	8f 87       	std	Y+15, r24	; 0x0f
    32cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ce:	98 89       	ldd	r25, Y+16	; 0x10
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <main+0x10b6>
    32d4:	98 8b       	std	Y+16, r25	; 0x10
    32d6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				send_password(password);
    32d8:	ce 01       	movw	r24, r28
    32da:	85 55       	subi	r24, 0x55	; 85
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	0e 94 14 1b 	call	0x3628	; 0x3628 <send_password>
				//_delay_ms(500);
				check_result=UART_recieveByte();
    32e2:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    32e6:	fe 01       	movw	r30, r28
    32e8:	eb 54       	subi	r30, 0x4B	; 75
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 83       	st	Z, r24
				if(check_result!=1)
    32ee:	fe 01       	movw	r30, r28
    32f0:	eb 54       	subi	r30, 0x4B	; 75
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <main+0x10e2>
    32fa:	78 c0       	rjmp	.+240    	; 0x33ec <main+0x11d2>
				{
					LCD_clearScreen();
    32fc:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
					LCD_displayString("wrong password");
    3300:	86 ed       	ldi	r24, 0xD6	; 214
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	aa ef       	ldi	r26, 0xFA	; 250
    330e:	b3 e4       	ldi	r27, 0x43	; 67
    3310:	8b 87       	std	Y+11, r24	; 0x0b
    3312:	9c 87       	std	Y+12, r25	; 0x0c
    3314:	ad 87       	std	Y+13, r26	; 0x0d
    3316:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3318:	6b 85       	ldd	r22, Y+11	; 0x0b
    331a:	7c 85       	ldd	r23, Y+12	; 0x0c
    331c:	8d 85       	ldd	r24, Y+13	; 0x0d
    331e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	4a ef       	ldi	r20, 0xFA	; 250
    3326:	54 e4       	ldi	r21, 0x44	; 68
    3328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	8f 83       	std	Y+7, r24	; 0x07
    3332:	98 87       	std	Y+8, r25	; 0x08
    3334:	a9 87       	std	Y+9, r26	; 0x09
    3336:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e8       	ldi	r20, 0x80	; 128
    3346:	5f e3       	ldi	r21, 0x3F	; 63
    3348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    334c:	88 23       	and	r24, r24
    334e:	2c f4       	brge	.+10     	; 0x335a <main+0x1140>
		__ticks = 1;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	3f c0       	rjmp	.+126    	; 0x33d8 <main+0x11be>
	else if (__tmp > 65535)
    335a:	6f 81       	ldd	r22, Y+7	; 0x07
    335c:	78 85       	ldd	r23, Y+8	; 0x08
    335e:	89 85       	ldd	r24, Y+9	; 0x09
    3360:	9a 85       	ldd	r25, Y+10	; 0x0a
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	4c f5       	brge	.+82     	; 0x33c4 <main+0x11aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3372:	6b 85       	ldd	r22, Y+11	; 0x0b
    3374:	7c 85       	ldd	r23, Y+12	; 0x0c
    3376:	8d 85       	ldd	r24, Y+13	; 0x0d
    3378:	9e 85       	ldd	r25, Y+14	; 0x0e
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e2       	ldi	r20, 0x20	; 32
    3380:	51 e4       	ldi	r21, 0x41	; 65
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	9e 83       	std	Y+6, r25	; 0x06
    3398:	8d 83       	std	Y+5, r24	; 0x05
    339a:	0f c0       	rjmp	.+30     	; 0x33ba <main+0x11a0>
    339c:	88 ec       	ldi	r24, 0xC8	; 200
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	9c 83       	std	Y+4, r25	; 0x04
    33a2:	8b 83       	std	Y+3, r24	; 0x03
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	9c 81       	ldd	r25, Y+4	; 0x04
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <main+0x118e>
    33ac:	9c 83       	std	Y+4, r25	; 0x04
    33ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	69 f7       	brne	.-38     	; 0x339c <main+0x1182>
    33c2:	14 c0       	rjmp	.+40     	; 0x33ec <main+0x11d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <main+0x11ca>
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
			while(check_result!=1&&count<3);
    33ec:	fe 01       	movw	r30, r28
    33ee:	eb 54       	subi	r30, 0x4B	; 75
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	39 f0       	breq	.+14     	; 0x3406 <main+0x11ec>
    33f8:	fe 01       	movw	r30, r28
    33fa:	e7 55       	subi	r30, 0x57	; 87
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	80 81       	ld	r24, Z
    3400:	83 30       	cpi	r24, 0x03	; 3
    3402:	08 f4       	brcc	.+2      	; 0x3406 <main+0x11ec>
    3404:	df ce       	rjmp	.-578    	; 0x31c4 <main+0xfaa>
			if(check_result==1)
    3406:	fe 01       	movw	r30, r28
    3408:	eb 54       	subi	r30, 0x4B	; 75
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	81 30       	cpi	r24, 0x01	; 1
    3410:	09 f0       	breq	.+2      	; 0x3414 <main+0x11fa>
    3412:	42 c0       	rjmp	.+132    	; 0x3498 <main+0x127e>
			{
				Timer0_seconds_MC1=0;
    3414:	10 92 30 01 	sts	0x0130, r1
    3418:	10 92 31 01 	sts	0x0131, r1
    341c:	10 92 32 01 	sts	0x0132, r1
    3420:	10 92 33 01 	sts	0x0133, r1
				LCD_clearScreen();
    3424:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("opening door");
    3428:	85 ee       	ldi	r24, 0xE5	; 229
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				while(Timer0_seconds_MC1<15);
    3430:	80 91 30 01 	lds	r24, 0x0130
    3434:	90 91 31 01 	lds	r25, 0x0131
    3438:	a0 91 32 01 	lds	r26, 0x0132
    343c:	b0 91 33 01 	lds	r27, 0x0133
    3440:	8f 30       	cpi	r24, 0x0F	; 15
    3442:	91 05       	cpc	r25, r1
    3444:	a1 05       	cpc	r26, r1
    3446:	b1 05       	cpc	r27, r1
    3448:	98 f3       	brcs	.-26     	; 0x3430 <main+0x1216>
				LCD_clearScreen();
    344a:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("door opened");
    344e:	82 ef       	ldi	r24, 0xF2	; 242
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				while(Timer0_seconds_MC1<18);
    3456:	80 91 30 01 	lds	r24, 0x0130
    345a:	90 91 31 01 	lds	r25, 0x0131
    345e:	a0 91 32 01 	lds	r26, 0x0132
    3462:	b0 91 33 01 	lds	r27, 0x0133
    3466:	82 31       	cpi	r24, 0x12	; 18
    3468:	91 05       	cpc	r25, r1
    346a:	a1 05       	cpc	r26, r1
    346c:	b1 05       	cpc	r27, r1
    346e:	98 f3       	brcs	.-26     	; 0x3456 <main+0x123c>
				LCD_clearScreen();
    3470:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("closing door");
    3474:	8e ef       	ldi	r24, 0xFE	; 254
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				while(Timer0_seconds_MC1<33);
    347c:	80 91 30 01 	lds	r24, 0x0130
    3480:	90 91 31 01 	lds	r25, 0x0131
    3484:	a0 91 32 01 	lds	r26, 0x0132
    3488:	b0 91 33 01 	lds	r27, 0x0133
    348c:	81 32       	cpi	r24, 0x21	; 33
    348e:	91 05       	cpc	r25, r1
    3490:	a1 05       	cpc	r26, r1
    3492:	b1 05       	cpc	r27, r1
    3494:	98 f3       	brcs	.-26     	; 0x347c <main+0x1262>
    3496:	4f cb       	rjmp	.-2402   	; 0x2b36 <main+0x91c>
			}
			else
			{
				LCD_clearScreen();
    3498:	0e 94 03 11 	call	0x2206	; 0x2206 <LCD_clearScreen>
				LCD_displayString("Activate Alarm");
    349c:	8b e0       	ldi	r24, 0x0B	; 11
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayString>
				Timer0_seconds_MC1=0;
    34a4:	10 92 30 01 	sts	0x0130, r1
    34a8:	10 92 31 01 	sts	0x0131, r1
    34ac:	10 92 32 01 	sts	0x0132, r1
    34b0:	10 92 33 01 	sts	0x0133, r1
				while(Timer0_seconds_MC1<60);
    34b4:	80 91 30 01 	lds	r24, 0x0130
    34b8:	90 91 31 01 	lds	r25, 0x0131
    34bc:	a0 91 32 01 	lds	r26, 0x0132
    34c0:	b0 91 33 01 	lds	r27, 0x0133
    34c4:	8c 33       	cpi	r24, 0x3C	; 60
    34c6:	91 05       	cpc	r25, r1
    34c8:	a1 05       	cpc	r26, r1
    34ca:	b1 05       	cpc	r27, r1
    34cc:	98 f3       	brcs	.-26     	; 0x34b4 <main+0x129a>
    34ce:	33 cb       	rjmp	.-2458   	; 0x2b36 <main+0x91c>

000034d0 <read_password>:
	}


}
void read_password(uint8*password)
{
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	62 97       	sbiw	r28, 0x12	; 18
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	9a 8b       	std	Y+18, r25	; 0x12
    34ea:	89 8b       	std	Y+17, r24	; 0x11
	for (uint8 i = 0; i < 5; i++) {
    34ec:	18 8a       	std	Y+16, r1	; 0x10
    34ee:	8d c0       	rjmp	.+282    	; 0x360a <read_password+0x13a>
		uint8 keypad_value=KEYPAD_getPressedKey();
    34f0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <KEYPAD_getPressedKey>
    34f4:	8f 87       	std	Y+15, r24	; 0x0f
		while ((i == 4)&&(keypad_value != 13));
    34f6:	88 89       	ldd	r24, Y+16	; 0x10
    34f8:	84 30       	cpi	r24, 0x04	; 4
    34fa:	19 f4       	brne	.+6      	; 0x3502 <read_password+0x32>
    34fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fe:	8d 30       	cpi	r24, 0x0D	; 13
    3500:	d1 f7       	brne	.-12     	; 0x34f6 <read_password+0x26>

		password[i] = KEYPAD_getPressedKey();
    3502:	88 89       	ldd	r24, Y+16	; 0x10
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	89 89       	ldd	r24, Y+17	; 0x11
    350a:	9a 89       	ldd	r25, Y+18	; 0x12
    350c:	8c 01       	movw	r16, r24
    350e:	02 0f       	add	r16, r18
    3510:	13 1f       	adc	r17, r19
    3512:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <KEYPAD_getPressedKey>
    3516:	f8 01       	movw	r30, r16
    3518:	80 83       	st	Z, r24
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	aa ef       	ldi	r26, 0xFA	; 250
    3520:	b3 e4       	ldi	r27, 0x43	; 67
    3522:	8b 87       	std	Y+11, r24	; 0x0b
    3524:	9c 87       	std	Y+12, r25	; 0x0c
    3526:	ad 87       	std	Y+13, r26	; 0x0d
    3528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	6b 85       	ldd	r22, Y+11	; 0x0b
    352c:	7c 85       	ldd	r23, Y+12	; 0x0c
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	4a ef       	ldi	r20, 0xFA	; 250
    3538:	54 e4       	ldi	r21, 0x44	; 68
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8f 83       	std	Y+7, r24	; 0x07
    3544:	98 87       	std	Y+8, r25	; 0x08
    3546:	a9 87       	std	Y+9, r26	; 0x09
    3548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	2c f4       	brge	.+10     	; 0x356c <read_password+0x9c>
		__ticks = 1;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	3f c0       	rjmp	.+126    	; 0x35ea <read_password+0x11a>
	else if (__tmp > 65535)
    356c:	6f 81       	ldd	r22, Y+7	; 0x07
    356e:	78 85       	ldd	r23, Y+8	; 0x08
    3570:	89 85       	ldd	r24, Y+9	; 0x09
    3572:	9a 85       	ldd	r25, Y+10	; 0x0a
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	4c f5       	brge	.+82     	; 0x35d6 <read_password+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <read_password+0xfc>
    35ae:	88 ec       	ldi	r24, 0xC8	; 200
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <read_password+0xea>
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9e 83       	std	Y+6, r25	; 0x06
    35ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	69 f7       	brne	.-38     	; 0x35ae <read_password+0xde>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <read_password+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <read_password+0x126>
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_displayCharacter('*');
    35fe:	8a e2       	ldi	r24, 0x2A	; 42
    3600:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_displayCharacter>


}
void read_password(uint8*password)
{
	for (uint8 i = 0; i < 5; i++) {
    3604:	88 89       	ldd	r24, Y+16	; 0x10
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	88 8b       	std	Y+16, r24	; 0x10
    360a:	88 89       	ldd	r24, Y+16	; 0x10
    360c:	85 30       	cpi	r24, 0x05	; 5
    360e:	08 f4       	brcc	.+2      	; 0x3612 <read_password+0x142>
    3610:	6f cf       	rjmp	.-290    	; 0x34f0 <read_password+0x20>

		password[i] = KEYPAD_getPressedKey();
		_delay_ms(500);
		LCD_displayCharacter('*');
	}
}
    3612:	62 96       	adiw	r28, 0x12	; 18
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	f8 94       	cli
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	08 95       	ret

00003628 <send_password>:
void send_password(uint8*password)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	61 97       	sbiw	r28, 0x11	; 17
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	99 8b       	std	Y+17, r25	; 0x11
    363e:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i=0 ; i<4 ; i++)
    3640:	1f 86       	std	Y+15, r1	; 0x0f
    3642:	80 c0       	rjmp	.+256    	; 0x3744 <send_password+0x11c>
	{
		UART_sendByte( password[i] );
    3644:	8f 85       	ldd	r24, Y+15	; 0x0f
    3646:	28 2f       	mov	r18, r24
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	88 89       	ldd	r24, Y+16	; 0x10
    364c:	99 89       	ldd	r25, Y+17	; 0x11
    364e:	fc 01       	movw	r30, r24
    3650:	e2 0f       	add	r30, r18
    3652:	f3 1f       	adc	r31, r19
    3654:	80 81       	ld	r24, Z
    3656:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	a2 e0       	ldi	r26, 0x02	; 2
    3660:	b3 e4       	ldi	r27, 0x43	; 67
    3662:	8b 87       	std	Y+11, r24	; 0x0b
    3664:	9c 87       	std	Y+12, r25	; 0x0c
    3666:	ad 87       	std	Y+13, r26	; 0x0d
    3668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366a:	6b 85       	ldd	r22, Y+11	; 0x0b
    366c:	7c 85       	ldd	r23, Y+12	; 0x0c
    366e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3670:	9e 85       	ldd	r25, Y+14	; 0x0e
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	4a ef       	ldi	r20, 0xFA	; 250
    3678:	54 e4       	ldi	r21, 0x44	; 68
    367a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	8f 83       	std	Y+7, r24	; 0x07
    3684:	98 87       	std	Y+8, r25	; 0x08
    3686:	a9 87       	std	Y+9, r26	; 0x09
    3688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    368a:	6f 81       	ldd	r22, Y+7	; 0x07
    368c:	78 85       	ldd	r23, Y+8	; 0x08
    368e:	89 85       	ldd	r24, Y+9	; 0x09
    3690:	9a 85       	ldd	r25, Y+10	; 0x0a
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	40 e8       	ldi	r20, 0x80	; 128
    3698:	5f e3       	ldi	r21, 0x3F	; 63
    369a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369e:	88 23       	and	r24, r24
    36a0:	2c f4       	brge	.+10     	; 0x36ac <send_password+0x84>
		__ticks = 1;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	3f c0       	rjmp	.+126    	; 0x372a <send_password+0x102>
	else if (__tmp > 65535)
    36ac:	6f 81       	ldd	r22, Y+7	; 0x07
    36ae:	78 85       	ldd	r23, Y+8	; 0x08
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	3f ef       	ldi	r19, 0xFF	; 255
    36b8:	4f e7       	ldi	r20, 0x7F	; 127
    36ba:	57 e4       	ldi	r21, 0x47	; 71
    36bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c0:	18 16       	cp	r1, r24
    36c2:	4c f5       	brge	.+82     	; 0x3716 <send_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e2       	ldi	r20, 0x20	; 32
    36d2:	51 e4       	ldi	r21, 0x41	; 65
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	bc 01       	movw	r22, r24
    36de:	cd 01       	movw	r24, r26
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	0f c0       	rjmp	.+30     	; 0x370c <send_password+0xe4>
    36ee:	88 ec       	ldi	r24, 0xC8	; 200
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	9c 83       	std	Y+4, r25	; 0x04
    36f4:	8b 83       	std	Y+3, r24	; 0x03
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	9c 81       	ldd	r25, Y+4	; 0x04
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <send_password+0xd2>
    36fe:	9c 83       	std	Y+4, r25	; 0x04
    3700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	9e 83       	std	Y+6, r25	; 0x06
    370a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	69 f7       	brne	.-38     	; 0x36ee <send_password+0xc6>
    3714:	14 c0       	rjmp	.+40     	; 0x373e <send_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3716:	6f 81       	ldd	r22, Y+7	; 0x07
    3718:	78 85       	ldd	r23, Y+8	; 0x08
    371a:	89 85       	ldd	r24, Y+9	; 0x09
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9e 83       	std	Y+6, r25	; 0x06
    3728:	8d 83       	std	Y+5, r24	; 0x05
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	9e 81       	ldd	r25, Y+6	; 0x06
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	9a 81       	ldd	r25, Y+2	; 0x02
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <send_password+0x10e>
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');
	}
}
void send_password(uint8*password)
{
	for (uint8 i=0 ; i<4 ; i++)
    373e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3740:	8f 5f       	subi	r24, 0xFF	; 255
    3742:	8f 87       	std	Y+15, r24	; 0x0f
    3744:	8f 85       	ldd	r24, Y+15	; 0x0f
    3746:	84 30       	cpi	r24, 0x04	; 4
    3748:	08 f4       	brcc	.+2      	; 0x374c <send_password+0x124>
    374a:	7c cf       	rjmp	.-264    	; 0x3644 <send_password+0x1c>
	{
		UART_sendByte( password[i] );
		_delay_ms(130);
	}
}
    374c:	61 96       	adiw	r28, 0x11	; 17
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config*ptr_config)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <UART_init+0x6>
    3764:	00 d0       	rcall	.+0      	; 0x3766 <UART_init+0x8>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	9c 83       	std	Y+4, r25	; 0x04
    376c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    376e:	1a 82       	std	Y+2, r1	; 0x02
    3770:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3772:	eb e2       	ldi	r30, 0x2B	; 43
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    377a:	ea e2       	ldi	r30, 0x2A	; 42
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	88 e1       	ldi	r24, 0x18	; 24
    3780:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (ptr_config->mode<<6)|(ptr_config->ParityBits<<5)|(ptr_config->StopBits<<3);
    3782:	a0 e4       	ldi	r26, 0x40	; 64
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	eb 81       	ldd	r30, Y+3	; 0x03
    3788:	fc 81       	ldd	r31, Y+4	; 0x04
    378a:	84 81       	ldd	r24, Z+4	; 0x04
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	00 24       	eor	r0, r0
    3792:	96 95       	lsr	r25
    3794:	87 95       	ror	r24
    3796:	07 94       	ror	r0
    3798:	96 95       	lsr	r25
    379a:	87 95       	ror	r24
    379c:	07 94       	ror	r0
    379e:	98 2f       	mov	r25, r24
    37a0:	80 2d       	mov	r24, r0
    37a2:	28 2f       	mov	r18, r24
    37a4:	eb 81       	ldd	r30, Y+3	; 0x03
    37a6:	fc 81       	ldd	r31, Y+4	; 0x04
    37a8:	86 81       	ldd	r24, Z+6	; 0x06
    37aa:	88 2f       	mov	r24, r24
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	82 95       	swap	r24
    37b4:	92 95       	swap	r25
    37b6:	90 7f       	andi	r25, 0xF0	; 240
    37b8:	98 27       	eor	r25, r24
    37ba:	80 7f       	andi	r24, 0xF0	; 240
    37bc:	98 27       	eor	r25, r24
    37be:	28 2b       	or	r18, r24
    37c0:	eb 81       	ldd	r30, Y+3	; 0x03
    37c2:	fc 81       	ldd	r31, Y+4	; 0x04
    37c4:	85 81       	ldd	r24, Z+5	; 0x05
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	82 2b       	or	r24, r18
    37d8:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((ptr_config->BaudRate) * 8UL))) - 1);
    37da:	eb 81       	ldd	r30, Y+3	; 0x03
    37dc:	fc 81       	ldd	r31, Y+4	; 0x04
    37de:	80 81       	ld	r24, Z
    37e0:	91 81       	ldd	r25, Z+1	; 0x01
    37e2:	a2 81       	ldd	r26, Z+2	; 0x02
    37e4:	b3 81       	ldd	r27, Z+3	; 0x03
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	aa 1f       	adc	r26, r26
    37ec:	bb 1f       	adc	r27, r27
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	aa 1f       	adc	r26, r26
    37f4:	bb 1f       	adc	r27, r27
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	9c 01       	movw	r18, r24
    3800:	ad 01       	movw	r20, r26
    3802:	80 e4       	ldi	r24, 0x40	; 64
    3804:	92 e4       	ldi	r25, 0x42	; 66
    3806:	af e0       	ldi	r26, 0x0F	; 15
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__udivmodsi4>
    3812:	da 01       	movw	r26, r20
    3814:	c9 01       	movw	r24, r18
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    381c:	e0 e4       	ldi	r30, 0x40	; 64
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	89 2f       	mov	r24, r25
    3826:	99 27       	eor	r25, r25
    3828:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    382a:	e9 e2       	ldi	r30, 0x29	; 41
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	80 83       	st	Z, r24
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    384c:	eb e2       	ldi	r30, 0x2B	; 43
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	88 2f       	mov	r24, r24
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	80 72       	andi	r24, 0x20	; 32
    3858:	90 70       	andi	r25, 0x00	; 0
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	b9 f3       	breq	.-18     	; 0x384c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    385e:	ec e2       	ldi	r30, 0x2C	; 44
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3876:	eb e2       	ldi	r30, 0x2B	; 43
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	88 23       	and	r24, r24
    387e:	dc f7       	brge	.-10     	; 0x3876 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3880:	ec e2       	ldi	r30, 0x2C	; 44
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
}
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <UART_sendString+0x6>
    3892:	0f 92       	push	r0
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    389c:	19 82       	std	Y+1, r1	; 0x01
    389e:	0e c0       	rjmp	.+28     	; 0x38bc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	fc 01       	movw	r30, r24
    38ac:	e2 0f       	add	r30, r18
    38ae:	f3 1f       	adc	r31, r19
    38b0:	80 81       	ld	r24, Z
    38b2:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
		i++;
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	8f 5f       	subi	r24, 0xFF	; 255
    38ba:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	fc 01       	movw	r30, r24
    38c8:	e2 0f       	add	r30, r18
    38ca:	f3 1f       	adc	r31, r19
    38cc:	80 81       	ld	r24, Z
    38ce:	88 23       	and	r24, r24
    38d0:	39 f7       	brne	.-50     	; 0x38a0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <UART_receiveString+0xa>
    38e8:	0f 92       	push	r0
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	9b 83       	std	Y+3, r25	; 0x03
    38f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38f2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	28 2f       	mov	r18, r24
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	9b 81       	ldd	r25, Y+3	; 0x03
    38fe:	8c 01       	movw	r16, r24
    3900:	02 0f       	add	r16, r18
    3902:	13 1f       	adc	r17, r19
    3904:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    3908:	f8 01       	movw	r30, r16
    390a:	80 83       	st	Z, r24
    390c:	0f c0       	rjmp	.+30     	; 0x392c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	8f 5f       	subi	r24, 0xFF	; 255
    3912:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	9b 81       	ldd	r25, Y+3	; 0x03
    391e:	8c 01       	movw	r16, r24
    3920:	02 0f       	add	r16, r18
    3922:	13 1f       	adc	r17, r19
    3924:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    3928:	f8 01       	movw	r30, r16
    392a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	9b 81       	ldd	r25, Y+3	; 0x03
    3936:	fc 01       	movw	r30, r24
    3938:	e2 0f       	add	r30, r18
    393a:	f3 1f       	adc	r31, r19
    393c:	80 81       	ld	r24, Z
    393e:	83 32       	cpi	r24, 0x23	; 35
    3940:	31 f7       	brne	.-52     	; 0x390e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	9b 81       	ldd	r25, Y+3	; 0x03
    394c:	fc 01       	movw	r30, r24
    394e:	e2 0f       	add	r30, r18
    3950:	f3 1f       	adc	r31, r19
    3952:	10 82       	st	Z, r1
}
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	08 95       	ret

00003964 <__udivmodsi4>:
    3964:	a1 e2       	ldi	r26, 0x21	; 33
    3966:	1a 2e       	mov	r1, r26
    3968:	aa 1b       	sub	r26, r26
    396a:	bb 1b       	sub	r27, r27
    396c:	fd 01       	movw	r30, r26
    396e:	0d c0       	rjmp	.+26     	; 0x398a <__udivmodsi4_ep>

00003970 <__udivmodsi4_loop>:
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	ee 1f       	adc	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	a2 17       	cp	r26, r18
    397a:	b3 07       	cpc	r27, r19
    397c:	e4 07       	cpc	r30, r20
    397e:	f5 07       	cpc	r31, r21
    3980:	20 f0       	brcs	.+8      	; 0x398a <__udivmodsi4_ep>
    3982:	a2 1b       	sub	r26, r18
    3984:	b3 0b       	sbc	r27, r19
    3986:	e4 0b       	sbc	r30, r20
    3988:	f5 0b       	sbc	r31, r21

0000398a <__udivmodsi4_ep>:
    398a:	66 1f       	adc	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	88 1f       	adc	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	1a 94       	dec	r1
    3994:	69 f7       	brne	.-38     	; 0x3970 <__udivmodsi4_loop>
    3996:	60 95       	com	r22
    3998:	70 95       	com	r23
    399a:	80 95       	com	r24
    399c:	90 95       	com	r25
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	bd 01       	movw	r22, r26
    39a4:	cf 01       	movw	r24, r30
    39a6:	08 95       	ret

000039a8 <__prologue_saves__>:
    39a8:	2f 92       	push	r2
    39aa:	3f 92       	push	r3
    39ac:	4f 92       	push	r4
    39ae:	5f 92       	push	r5
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	ca 1b       	sub	r28, r26
    39d2:	db 0b       	sbc	r29, r27
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	09 94       	ijmp

000039e0 <__epilogue_restores__>:
    39e0:	2a 88       	ldd	r2, Y+18	; 0x12
    39e2:	39 88       	ldd	r3, Y+17	; 0x11
    39e4:	48 88       	ldd	r4, Y+16	; 0x10
    39e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f2:	b9 84       	ldd	r11, Y+9	; 0x09
    39f4:	c8 84       	ldd	r12, Y+8	; 0x08
    39f6:	df 80       	ldd	r13, Y+7	; 0x07
    39f8:	ee 80       	ldd	r14, Y+6	; 0x06
    39fa:	fd 80       	ldd	r15, Y+5	; 0x05
    39fc:	0c 81       	ldd	r16, Y+4	; 0x04
    39fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3a00:	aa 81       	ldd	r26, Y+2	; 0x02
    3a02:	b9 81       	ldd	r27, Y+1	; 0x01
    3a04:	ce 0f       	add	r28, r30
    3a06:	d1 1d       	adc	r29, r1
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	ed 01       	movw	r28, r26
    3a14:	08 95       	ret

00003a16 <itoa>:
    3a16:	fb 01       	movw	r30, r22
    3a18:	9f 01       	movw	r18, r30
    3a1a:	e8 94       	clt
    3a1c:	42 30       	cpi	r20, 0x02	; 2
    3a1e:	c4 f0       	brlt	.+48     	; 0x3a50 <itoa+0x3a>
    3a20:	45 32       	cpi	r20, 0x25	; 37
    3a22:	b4 f4       	brge	.+44     	; 0x3a50 <itoa+0x3a>
    3a24:	4a 30       	cpi	r20, 0x0A	; 10
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <itoa+0x1c>
    3a28:	97 fb       	bst	r25, 7
    3a2a:	1e f4       	brtc	.+6      	; 0x3a32 <itoa+0x1c>
    3a2c:	90 95       	com	r25
    3a2e:	81 95       	neg	r24
    3a30:	9f 4f       	sbci	r25, 0xFF	; 255
    3a32:	64 2f       	mov	r22, r20
    3a34:	77 27       	eor	r23, r23
    3a36:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__udivmodhi4>
    3a3a:	80 5d       	subi	r24, 0xD0	; 208
    3a3c:	8a 33       	cpi	r24, 0x3A	; 58
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <itoa+0x2c>
    3a40:	89 5d       	subi	r24, 0xD9	; 217
    3a42:	81 93       	st	Z+, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	a1 f7       	brne	.-24     	; 0x3a32 <itoa+0x1c>
    3a4a:	16 f4       	brtc	.+4      	; 0x3a50 <itoa+0x3a>
    3a4c:	5d e2       	ldi	r21, 0x2D	; 45
    3a4e:	51 93       	st	Z+, r21
    3a50:	10 82       	st	Z, r1
    3a52:	c9 01       	movw	r24, r18
    3a54:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <strrev>

00003a58 <strrev>:
    3a58:	dc 01       	movw	r26, r24
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	67 2f       	mov	r22, r23
    3a5e:	71 91       	ld	r23, Z+
    3a60:	77 23       	and	r23, r23
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <strrev+0x4>
    3a64:	32 97       	sbiw	r30, 0x02	; 2
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <strrev+0x18>
    3a68:	7c 91       	ld	r23, X
    3a6a:	6d 93       	st	X+, r22
    3a6c:	70 83       	st	Z, r23
    3a6e:	62 91       	ld	r22, -Z
    3a70:	ae 17       	cp	r26, r30
    3a72:	bf 07       	cpc	r27, r31
    3a74:	c8 f3       	brcs	.-14     	; 0x3a68 <strrev+0x10>
    3a76:	08 95       	ret

00003a78 <__udivmodhi4>:
    3a78:	aa 1b       	sub	r26, r26
    3a7a:	bb 1b       	sub	r27, r27
    3a7c:	51 e1       	ldi	r21, 0x11	; 17
    3a7e:	07 c0       	rjmp	.+14     	; 0x3a8e <__udivmodhi4_ep>

00003a80 <__udivmodhi4_loop>:
    3a80:	aa 1f       	adc	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	a6 17       	cp	r26, r22
    3a86:	b7 07       	cpc	r27, r23
    3a88:	10 f0       	brcs	.+4      	; 0x3a8e <__udivmodhi4_ep>
    3a8a:	a6 1b       	sub	r26, r22
    3a8c:	b7 0b       	sbc	r27, r23

00003a8e <__udivmodhi4_ep>:
    3a8e:	88 1f       	adc	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	5a 95       	dec	r21
    3a94:	a9 f7       	brne	.-22     	; 0x3a80 <__udivmodhi4_loop>
    3a96:	80 95       	com	r24
    3a98:	90 95       	com	r25
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	08 95       	ret

00003aa0 <_exit>:
    3aa0:	f8 94       	cli

00003aa2 <__stop_program>:
    3aa2:	ff cf       	rjmp	.-2      	; 0x3aa2 <__stop_program>
