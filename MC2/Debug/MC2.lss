
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003098  0000312c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  00003146  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  00003148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000152a  00000000  00000000  00006340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000786a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_8>
      24:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 12 	call	0x2412	; 0x2412 <main>
      8a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:
#include "gpio.h"
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Buzzer_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_FIRST_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_SECOND_PIN_ID, PIN_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_FIRST_PIN_ID, LOGIC_LOW);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	66 e0       	ldi	r22, 0x06	; 6
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_SECOND_PIN_ID, LOGIC_LOW);
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <Buzzer_On>:

void Buzzer_On()
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_FIRST_PIN_ID, LOGIC_HIGH);
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_SECOND_PIN_ID, LOGIC_LOW);
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	67 e0       	ldi	r22, 0x07	; 7
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <Buzzer_Off>:
void Buzzer_Off()
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_FIRST_PIN_ID, LOGIC_LOW);
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	66 e0       	ldi	r22, 0x06	; 6
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_SECOND_PIN_ID, LOGIC_LOW);
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	67 e0       	ldi	r22, 0x07	; 7
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
}
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <DcMotor_Init>:
 * Initialize the Motor:
 * 1. Setup the Motor pins directions by use the GPIO driver.
 * 2. Setup the Motor State to stop.
 */
void DcMotor_Init(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_PORT_ID, Motor_FIRST_PIN_ID, PIN_OUTPUT);
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	65 e0       	ldi	r22, 0x05	; 5
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_PORT_ID, Motor_SECOND_PIN_ID, PIN_OUTPUT);
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	66 e0       	ldi	r22, 0x06	; 6
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_writePin(Motor_PORT_ID, Motor_FIRST_PIN_ID, LOGIC_LOW);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	65 e0       	ldi	r22, 0x05	; 5
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(Motor_PORT_ID, Motor_SECOND_PIN_ID, LOGIC_LOW);
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	66 e0       	ldi	r22, 0x06	; 6
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <DcMotor_Rotate_Clockwise>:
 * Description :
 * 1. determine the duty cycle with respect to speed
 * 2. determine state of motor
 */
void DcMotor_Rotate_Clockwise()
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	DcMotor_State state=Clockwise;
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(Motor_PORT_ID, state<<Motor_FIRST_PIN_ID);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	98 2f       	mov	r25, r24
     c08:	92 95       	swap	r25
     c0a:	99 0f       	add	r25, r25
     c0c:	90 7e       	andi	r25, 0xE0	; 224
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	69 2f       	mov	r22, r25
     c12:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_writePort>
}
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <DcMotor_Rotate_AntiClockwise>:
void DcMotor_Rotate_AntiClockwise()
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	DcMotor_State state=AntiClockwise;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(Motor_PORT_ID, state<<Motor_FIRST_PIN_ID);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	98 2f       	mov	r25, r24
     c30:	92 95       	swap	r25
     c32:	99 0f       	add	r25, r25
     c34:	90 7e       	andi	r25, 0xE0	; 224
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	69 2f       	mov	r22, r25
     c3a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_writePort>
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <DcMotor_Stop>:
void DcMotor_Stop()
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	0f 92       	push	r0
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	DcMotor_State state=Stop;
     c50:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePort(Motor_PORT_ID, state<<Motor_FIRST_PIN_ID);
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	98 2f       	mov	r25, r24
     c56:	92 95       	swap	r25
     c58:	99 0f       	add	r25, r25
     c5a:	90 7e       	andi	r25, 0xE0	; 224
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	69 2f       	mov	r22, r25
     c60:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_writePort>
}
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                                ISR Definitions                             *
 *******************************************************************************/
ISR (TIMER0_OVF_vect) /* ISR for timer 0 works with normal mode*/
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	timer0_ticks++;
     c96:	80 91 8a 00 	lds	r24, 0x008A
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	80 93 8a 00 	sts	0x008A, r24
	if(timer0_ticks==NUMBER_OF_OVERFLOWS_PER_SECOND_TIMER0)
     ca0:	80 91 8a 00 	lds	r24, 0x008A
     ca4:	8e 31       	cpi	r24, 0x1E	; 30
     ca6:	99 f5       	brne	.+102    	; 0xd0e <__vector_9+0xa2>
	{
Timer0_seconds_MC1++;Timer0_seconds_MC2++;
     ca8:	80 91 7a 00 	lds	r24, 0x007A
     cac:	90 91 7b 00 	lds	r25, 0x007B
     cb0:	a0 91 7c 00 	lds	r26, 0x007C
     cb4:	b0 91 7d 00 	lds	r27, 0x007D
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	a1 1d       	adc	r26, r1
     cbc:	b1 1d       	adc	r27, r1
     cbe:	80 93 7a 00 	sts	0x007A, r24
     cc2:	90 93 7b 00 	sts	0x007B, r25
     cc6:	a0 93 7c 00 	sts	0x007C, r26
     cca:	b0 93 7d 00 	sts	0x007D, r27
     cce:	80 91 7e 00 	lds	r24, 0x007E
     cd2:	90 91 7f 00 	lds	r25, 0x007F
     cd6:	a0 91 80 00 	lds	r26, 0x0080
     cda:	b0 91 81 00 	lds	r27, 0x0081
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	a1 1d       	adc	r26, r1
     ce2:	b1 1d       	adc	r27, r1
     ce4:	80 93 7e 00 	sts	0x007E, r24
     ce8:	90 93 7f 00 	sts	0x007F, r25
     cec:	a0 93 80 00 	sts	0x0080, r26
     cf0:	b0 93 81 00 	sts	0x0081, r27
if(g_callBackPtr != NULL_PTR)
     cf4:	80 91 8c 00 	lds	r24, 0x008C
     cf8:	90 91 8d 00 	lds	r25, 0x008D
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	29 f0       	breq	.+10     	; 0xd0a <__vector_9+0x9e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     d00:	e0 91 8c 00 	lds	r30, 0x008C
     d04:	f0 91 8d 00 	lds	r31, 0x008D
     d08:	09 95       	icall
	}
   timer0_ticks=0;
     d0a:	10 92 8a 00 	sts	0x008A, r1
	}
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_8>:
ISR (TIMER1_OVF_vect) /* ISR for timer 1 works with normal mode*/
{
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
Timer1_seconds_MC1++;Timer1_seconds_MC2++;
     d5e:	80 91 82 00 	lds	r24, 0x0082
     d62:	90 91 83 00 	lds	r25, 0x0083
     d66:	a0 91 84 00 	lds	r26, 0x0084
     d6a:	b0 91 85 00 	lds	r27, 0x0085
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	a1 1d       	adc	r26, r1
     d72:	b1 1d       	adc	r27, r1
     d74:	80 93 82 00 	sts	0x0082, r24
     d78:	90 93 83 00 	sts	0x0083, r25
     d7c:	a0 93 84 00 	sts	0x0084, r26
     d80:	b0 93 85 00 	sts	0x0085, r27
     d84:	80 91 86 00 	lds	r24, 0x0086
     d88:	90 91 87 00 	lds	r25, 0x0087
     d8c:	a0 91 88 00 	lds	r26, 0x0088
     d90:	b0 91 89 00 	lds	r27, 0x0089
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	a1 1d       	adc	r26, r1
     d98:	b1 1d       	adc	r27, r1
     d9a:	80 93 86 00 	sts	0x0086, r24
     d9e:	90 93 87 00 	sts	0x0087, r25
     da2:	a0 93 88 00 	sts	0x0088, r26
     da6:	b0 93 89 00 	sts	0x0089, r27
if(g_callBackPtr != NULL_PTR)
     daa:	80 91 8c 00 	lds	r24, 0x008C
     dae:	90 91 8d 00 	lds	r25, 0x008D
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	29 f0       	breq	.+10     	; 0xdc0 <__vector_8+0x8c>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     db6:	e0 91 8c 00 	lds	r30, 0x008C
     dba:	f0 91 8d 00 	lds	r31, 0x008D
     dbe:	09 95       	icall
	}
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_19>:
ISR (TIMER0_COMP_vect) /* ISR for timer 0 works with compare mode */
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	timer0_ticks++;
     e10:	80 91 8a 00 	lds	r24, 0x008A
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 93 8a 00 	sts	0x008A, r24
	if(timer0_ticks==NUMBER_OF_COMPARES_PER_SECOND_TIMER0)
     e1a:	80 91 8a 00 	lds	r24, 0x008A
     e1e:	8e 31       	cpi	r24, 0x1E	; 30
     e20:	99 f5       	brne	.+102    	; 0xe88 <__vector_19+0xa2>
	{
Timer0_seconds_MC1++;Timer0_seconds_MC2++;
     e22:	80 91 7a 00 	lds	r24, 0x007A
     e26:	90 91 7b 00 	lds	r25, 0x007B
     e2a:	a0 91 7c 00 	lds	r26, 0x007C
     e2e:	b0 91 7d 00 	lds	r27, 0x007D
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	a1 1d       	adc	r26, r1
     e36:	b1 1d       	adc	r27, r1
     e38:	80 93 7a 00 	sts	0x007A, r24
     e3c:	90 93 7b 00 	sts	0x007B, r25
     e40:	a0 93 7c 00 	sts	0x007C, r26
     e44:	b0 93 7d 00 	sts	0x007D, r27
     e48:	80 91 7e 00 	lds	r24, 0x007E
     e4c:	90 91 7f 00 	lds	r25, 0x007F
     e50:	a0 91 80 00 	lds	r26, 0x0080
     e54:	b0 91 81 00 	lds	r27, 0x0081
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	a1 1d       	adc	r26, r1
     e5c:	b1 1d       	adc	r27, r1
     e5e:	80 93 7e 00 	sts	0x007E, r24
     e62:	90 93 7f 00 	sts	0x007F, r25
     e66:	a0 93 80 00 	sts	0x0080, r26
     e6a:	b0 93 81 00 	sts	0x0081, r27
if(g_callBackPtr != NULL_PTR)
     e6e:	80 91 8c 00 	lds	r24, 0x008C
     e72:	90 91 8d 00 	lds	r25, 0x008D
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	29 f0       	breq	.+10     	; 0xe84 <__vector_19+0x9e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e7a:	e0 91 8c 00 	lds	r30, 0x008C
     e7e:	f0 91 8d 00 	lds	r31, 0x008D
     e82:	09 95       	icall
	}
    timer0_ticks=0;
     e84:	10 92 8a 00 	sts	0x008A, r1
	}
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_6>:
ISR (TIMER1_COMPA_vect) /* ISR for timer 1 works with compare mode */
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
Timer1_seconds_MC1++;Timer1_seconds_MC2++;
     ed8:	80 91 82 00 	lds	r24, 0x0082
     edc:	90 91 83 00 	lds	r25, 0x0083
     ee0:	a0 91 84 00 	lds	r26, 0x0084
     ee4:	b0 91 85 00 	lds	r27, 0x0085
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	a1 1d       	adc	r26, r1
     eec:	b1 1d       	adc	r27, r1
     eee:	80 93 82 00 	sts	0x0082, r24
     ef2:	90 93 83 00 	sts	0x0083, r25
     ef6:	a0 93 84 00 	sts	0x0084, r26
     efa:	b0 93 85 00 	sts	0x0085, r27
     efe:	80 91 86 00 	lds	r24, 0x0086
     f02:	90 91 87 00 	lds	r25, 0x0087
     f06:	a0 91 88 00 	lds	r26, 0x0088
     f0a:	b0 91 89 00 	lds	r27, 0x0089
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	a1 1d       	adc	r26, r1
     f12:	b1 1d       	adc	r27, r1
     f14:	80 93 86 00 	sts	0x0086, r24
     f18:	90 93 87 00 	sts	0x0087, r25
     f1c:	a0 93 88 00 	sts	0x0088, r26
     f20:	b0 93 89 00 	sts	0x0089, r27
if(g_callBackPtr != NULL_PTR)
     f24:	80 91 8c 00 	lds	r24, 0x008C
     f28:	90 91 8d 00 	lds	r25, 0x008D
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_6+0x8c>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f30:	e0 91 8c 00 	lds	r30, 0x008C
     f34:	f0 91 8d 00 	lds	r31, 0x008D
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer0_Init(TimerConfig*Config_ptr)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <Timer0_Init+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_ptr->initial_value; //Set Timer initial value to 0
     f6e:	a2 e5       	ldi	r26, 0x52	; 82
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e9 81       	ldd	r30, Y+1	; 0x01
     f74:	fa 81       	ldd	r31, Y+2	; 0x02
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	8c 93       	st	X, r24
	if(Config_ptr->mode==Normal)
     f7c:	e9 81       	ldd	r30, Y+1	; 0x01
     f7e:	fa 81       	ldd	r31, Y+2	; 0x02
     f80:	80 81       	ld	r24, Z
     f82:	80 38       	cpi	r24, 0x80	; 128
     f84:	89 f4       	brne	.+34     	; 0xfa8 <Timer0_Init+0x48>
	{
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
     f86:	a9 e5       	ldi	r26, 0x59	; 89
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 e5       	ldi	r30, 0x59	; 89
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock
	 */
	TCCR0 = Config_ptr->clock|Config_ptr->mode;
     f94:	a3 e5       	ldi	r26, 0x53	; 83
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	80 81       	ld	r24, Z
     fa4:	89 2b       	or	r24, r25
     fa6:	8c 93       	st	X, r24
	}
	if(Config_ptr->mode==CTC)
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	80 81       	ld	r24, Z
     fae:	88 38       	cpi	r24, 0x88	; 136
     fb0:	c1 f4       	brne	.+48     	; 0xfe2 <Timer0_Init+0x82>
		{
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     fb2:	a9 e5       	ldi	r26, 0x59	; 89
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e9 e5       	ldi	r30, 0x59	; 89
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock
			 */
		TCCR0 = Config_ptr->clock|Config_ptr->mode;
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e9 81       	ldd	r30, Y+1	; 0x01
     fc6:	fa 81       	ldd	r31, Y+2	; 0x02
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	80 81       	ld	r24, Z
     fd0:	89 2b       	or	r24, r25
     fd2:	8c 93       	st	X, r24
		OCR0  = Config_ptr->compare_value; // Set Compare Value
     fd4:	ac e5       	ldi	r26, 0x5C	; 92
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	84 81       	ldd	r24, Z+4	; 0x04
     fde:	95 81       	ldd	r25, Z+5	; 0x05
     fe0:	8c 93       	st	X, r24
		}
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <Timer0_Deinit>:
void Timer0_Deinit()
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
     ff4:	e2 e5       	ldi	r30, 0x52	; 82
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	10 82       	st	Z, r1
	TCCR0=0;
     ffa:	e3 e5       	ldi	r30, 0x53	; 83
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE0)&~(1<<OCIE0); //stop interrupts
    1000:	a9 e5       	ldi	r26, 0x59	; 89
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e9 e5       	ldi	r30, 0x59	; 89
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8c 7f       	andi	r24, 0xFC	; 252
    100c:	8c 93       	st	X, r24
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <Timer0_Stop>:
void Timer0_Stop()
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xf8; //clear prescaler bits
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	8c 93       	st	X, r24
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Timer1_Init>:
void Timer1_Init(TimerConfig*Config_ptr)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <Timer1_Init+0x6>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01

	if(Config_ptr->mode==Normal)
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	80 81       	ld	r24, Z
    1044:	80 38       	cpi	r24, 0x80	; 128
    1046:	c1 f4       	brne	.+48     	; 0x1078 <Timer1_Init+0x48>
		{
		TCNT1 = Config_ptr->initial_value;
    1048:	ac e4       	ldi	r26, 0x4C	; 76
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	9c 93       	st	X, r25
    1058:	8e 93       	st	-X, r24
		TCCR1B = Config_ptr->clock|Config_ptr->mode;
    105a:	ae e4       	ldi	r26, 0x4E	; 78
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	80 81       	ld	r24, Z
    106a:	89 2b       	or	r24, r25
    106c:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A); /* Enable Timer1 Normal Mode Interrupt */
    106e:	ef e4       	ldi	r30, 0x4F	; 79
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	80 83       	st	Z, r24
    1076:	23 c0       	rjmp	.+70     	; 0x10be <Timer1_Init+0x8e>
		}
	else if(Config_ptr->mode==CTC)
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	80 81       	ld	r24, Z
    107e:	88 38       	cpi	r24, 0x88	; 136
    1080:	f1 f4       	brne	.+60     	; 0x10be <Timer1_Init+0x8e>
	{
		OCR1A = Config_ptr->compare_value;
    1082:	aa e4       	ldi	r26, 0x4A	; 74
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 81       	ldd	r30, Y+1	; 0x01
    1088:	fa 81       	ldd	r31, Y+2	; 0x02
    108a:	84 81       	ldd	r24, Z+4	; 0x04
    108c:	95 81       	ldd	r25, Z+5	; 0x05
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	9c 93       	st	X, r25
    1092:	8e 93       	st	-X, r24
		TCCR1B = Config_ptr->clock|Config_ptr->mode;
    1094:	ae e4       	ldi	r26, 0x4E	; 78
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e9 81       	ldd	r30, Y+1	; 0x01
    109a:	fa 81       	ldd	r31, Y+2	; 0x02
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	e9 81       	ldd	r30, Y+1	; 0x01
    10a0:	fa 81       	ldd	r31, Y+2	; 0x02
    10a2:	80 81       	ld	r24, Z
    10a4:	89 2b       	or	r24, r25
    10a6:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    10a8:	ef e4       	ldi	r30, 0x4F	; 79
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	88 e0       	ldi	r24, 0x08	; 8
    10ae:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    10b0:	a9 e5       	ldi	r26, 0x59	; 89
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e9 e5       	ldi	r30, 0x59	; 89
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 61       	ori	r24, 0x10	; 16
    10bc:	8c 93       	st	X, r24
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <Timer1_Deinit>:
void Timer1_Deinit()
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    10d0:	ec e4       	ldi	r30, 0x4C	; 76
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1
	TCCR1A=0;
    10d8:	ef e4       	ldi	r30, 0x4F	; 79
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
	TCCR1B=0;
    10de:	ee e4       	ldi	r30, 0x4E	; 78
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1)&~(1<<OCIE1A); //stop interrupts
    10e4:	a9 e5       	ldi	r26, 0x59	; 89
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e9 e5       	ldi	r30, 0x59	; 89
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8b 7e       	andi	r24, 0xEB	; 235
    10f0:	8c 93       	st	X, r24
}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <Timer1_Stop>:
void Timer1_Stop()
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=0xf8; //clear prescaler bits
    1100:	ae e4       	ldi	r26, 0x4E	; 78
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ee e4       	ldi	r30, 0x4E	; 78
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 7f       	andi	r24, 0xF8	; 248
    110c:	8c 93       	st	X, r24
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <Timer0_setCallBack+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	90 93 8d 00 	sts	0x008D, r25
    112a:	80 93 8c 00 	sts	0x008C, r24
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <Timer1_setCallBack+0x6>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	90 93 8d 00 	sts	0x008D, r25
    114e:	80 93 8c 00 	sts	0x008C, r24
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	28 97       	sbiw	r28, 0x08	; 8
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
	/* just initialize the I2C(TWI) module inside the MC */
	I2CConfig i2c_config={F_CPU_1,0x01,0x02};
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8c 83       	std	Y+4, r24	; 0x04
    1178:	e9 e6       	ldi	r30, 0x69	; 105
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	ff 83       	std	Y+7, r31	; 0x07
    117e:	ee 83       	std	Y+6, r30	; 0x06
    1180:	f3 e0       	ldi	r31, 0x03	; 3
    1182:	f8 87       	std	Y+8, r31	; 0x08
    1184:	ee 81       	ldd	r30, Y+6	; 0x06
    1186:	ff 81       	ldd	r31, Y+7	; 0x07
    1188:	00 80       	ld	r0, Z
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	9f 83       	std	Y+7, r25	; 0x07
    1192:	8e 83       	std	Y+6, r24	; 0x06
    1194:	ec 81       	ldd	r30, Y+4	; 0x04
    1196:	fd 81       	ldd	r31, Y+5	; 0x05
    1198:	00 82       	st	Z, r0
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	9d 83       	std	Y+5, r25	; 0x05
    11a2:	8c 83       	std	Y+4, r24	; 0x04
    11a4:	98 85       	ldd	r25, Y+8	; 0x08
    11a6:	91 50       	subi	r25, 0x01	; 1
    11a8:	98 87       	std	Y+8, r25	; 0x08
    11aa:	e8 85       	ldd	r30, Y+8	; 0x08
    11ac:	ee 23       	and	r30, r30
    11ae:	51 f7       	brne	.-44     	; 0x1184 <EEPROM_init+0x28>
	TWI_init(&i2c_config);
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <TWI_init>
}
    11b8:	28 96       	adiw	r28, 0x08	; 8
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <EEPROM_writeByte+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EEPROM_writeByte+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11dc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TWI_start>
    if (TWI_getStatus() != TW_START)
    11e0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	11 f0       	breq	.+4      	; 0x11ec <EEPROM_writeByte+0x22>
        return ERROR;
    11e8:	1c 82       	std	Y+4, r1	; 0x04
    11ea:	28 c0       	rjmp	.+80     	; 0x123c <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	80 70       	andi	r24, 0x00	; 0
    11f2:	97 70       	andi	r25, 0x07	; 7
    11f4:	88 0f       	add	r24, r24
    11f6:	89 2f       	mov	r24, r25
    11f8:	88 1f       	adc	r24, r24
    11fa:	99 0b       	sbc	r25, r25
    11fc:	91 95       	neg	r25
    11fe:	80 6a       	ori	r24, 0xA0	; 160
    1200:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1204:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    1208:	88 31       	cpi	r24, 0x18	; 24
    120a:	11 f0       	breq	.+4      	; 0x1210 <EEPROM_writeByte+0x46>
        return ERROR;
    120c:	1c 82       	std	Y+4, r1	; 0x04
    120e:	16 c0       	rjmp	.+44     	; 0x123c <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1216:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    121a:	88 32       	cpi	r24, 0x28	; 40
    121c:	11 f0       	breq	.+4      	; 0x1222 <EEPROM_writeByte+0x58>
        return ERROR;
    121e:	1c 82       	std	Y+4, r1	; 0x04
    1220:	0d c0       	rjmp	.+26     	; 0x123c <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1228:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    122c:	88 32       	cpi	r24, 0x28	; 40
    122e:	11 f0       	breq	.+4      	; 0x1234 <EEPROM_writeByte+0x6a>
        return ERROR;
    1230:	1c 82       	std	Y+4, r1	; 0x04
    1232:	04 c0       	rjmp	.+8      	; 0x123c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1234:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <TWI_stop>

    return SUCCESS;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8c 83       	std	Y+4, r24	; 0x04
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <EEPROM_readByte+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <EEPROM_readByte+0x8>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	7c 83       	std	Y+4, r23	; 0x04
    1260:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1262:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TWI_start>
    if (TWI_getStatus() != TW_START)
    1266:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	11 f0       	breq	.+4      	; 0x1272 <EEPROM_readByte+0x26>
        return ERROR;
    126e:	1d 82       	std	Y+5, r1	; 0x05
    1270:	44 c0       	rjmp	.+136    	; 0x12fa <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	80 70       	andi	r24, 0x00	; 0
    1278:	97 70       	andi	r25, 0x07	; 7
    127a:	88 0f       	add	r24, r24
    127c:	89 2f       	mov	r24, r25
    127e:	88 1f       	adc	r24, r24
    1280:	99 0b       	sbc	r25, r25
    1282:	91 95       	neg	r25
    1284:	80 6a       	ori	r24, 0xA0	; 160
    1286:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    128a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    128e:	88 31       	cpi	r24, 0x18	; 24
    1290:	11 f0       	breq	.+4      	; 0x1296 <EEPROM_readByte+0x4a>
        return ERROR;
    1292:	1d 82       	std	Y+5, r1	; 0x05
    1294:	32 c0       	rjmp	.+100    	; 0x12fa <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    129c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    12a0:	88 32       	cpi	r24, 0x28	; 40
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <EEPROM_readByte+0x5c>
        return ERROR;
    12a4:	1d 82       	std	Y+5, r1	; 0x05
    12a6:	29 c0       	rjmp	.+82     	; 0x12fa <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    12a8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    12ac:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    12b0:	80 31       	cpi	r24, 0x10	; 16
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <EEPROM_readByte+0x6c>
        return ERROR;
    12b4:	1d 82       	std	Y+5, r1	; 0x05
    12b6:	21 c0       	rjmp	.+66     	; 0x12fa <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	80 70       	andi	r24, 0x00	; 0
    12be:	97 70       	andi	r25, 0x07	; 7
    12c0:	88 0f       	add	r24, r24
    12c2:	89 2f       	mov	r24, r25
    12c4:	88 1f       	adc	r24, r24
    12c6:	99 0b       	sbc	r25, r25
    12c8:	91 95       	neg	r25
    12ca:	81 6a       	ori	r24, 0xA1	; 161
    12cc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    12d0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    12d4:	80 34       	cpi	r24, 0x40	; 64
    12d6:	11 f0       	breq	.+4      	; 0x12dc <EEPROM_readByte+0x90>
        return ERROR;
    12d8:	1d 82       	std	Y+5, r1	; 0x05
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    12dc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TWI_readWithNACK>
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    12e6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TWI_getStatus>
    12ea:	88 35       	cpi	r24, 0x58	; 88
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <EEPROM_readByte+0xa6>
        return ERROR;
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12f2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <TWI_stop>
    return SUCCESS;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GPIO_setupPinDirection+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <GPIO_setupPinDirection+0x8>
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6a 83       	std	Y+2, r22	; 0x02
    131e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 30       	cpi	r24, 0x08	; 8
    1324:	08 f0       	brcs	.+2      	; 0x1328 <GPIO_setupPinDirection+0x1c>
    1326:	d5 c0       	rjmp	.+426    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	08 f0       	brcs	.+2      	; 0x1330 <GPIO_setupPinDirection+0x24>
    132e:	d1 c0       	rjmp	.+418    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3d 83       	std	Y+5, r19	; 0x05
    1338:	2c 83       	std	Y+4, r18	; 0x04
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <GPIO_setupPinDirection+0x3a>
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <GPIO_setupPinDirection+0xc0>
    1346:	2c 81       	ldd	r18, Y+4	; 0x04
    1348:	3d 81       	ldd	r19, Y+5	; 0x05
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <GPIO_setupPinDirection+0x4e>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	71 f0       	breq	.+28     	; 0x1374 <GPIO_setupPinDirection+0x68>
    1358:	bc c0       	rjmp	.+376    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <GPIO_setupPinDirection+0x5a>
    1364:	5f c0       	rjmp	.+190    	; 0x1424 <GPIO_setupPinDirection+0x118>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <GPIO_setupPinDirection+0x66>
    1370:	85 c0       	rjmp	.+266    	; 0x147c <GPIO_setupPinDirection+0x170>
    1372:	af c0       	rjmp	.+350    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	a1 f4       	brne	.+40     	; 0x13a2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    137a:	aa e3       	ldi	r26, 0x3A	; 58
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <GPIO_setupPinDirection+0x8c>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <GPIO_setupPinDirection+0x88>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	98 c0       	rjmp	.+304    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13a2:	aa e3       	ldi	r26, 0x3A	; 58
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0xb4>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0xb0>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	83 c0       	rjmp	.+262    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	a1 f4       	brne	.+40     	; 0x13fa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13d2:	a7 e3       	ldi	r26, 0x37	; 55
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_setupPinDirection+0xe4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_setupPinDirection+0xe0>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	6c c0       	rjmp	.+216    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13fa:	a7 e3       	ldi	r26, 0x37	; 55
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e7 e3       	ldi	r30, 0x37	; 55
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_setupPinDirection+0x10c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_setupPinDirection+0x108>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	57 c0       	rjmp	.+174    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	a1 f4       	brne	.+40     	; 0x1452 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    142a:	a4 e3       	ldi	r26, 0x34	; 52
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e4 e3       	ldi	r30, 0x34	; 52
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_setupPinDirection+0x13c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_setupPinDirection+0x138>
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	40 c0       	rjmp	.+128    	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1452:	a4 e3       	ldi	r26, 0x34	; 52
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_setupPinDirection+0x164>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_setupPinDirection+0x160>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	2b c0       	rjmp	.+86     	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	a1 f4       	brne	.+40     	; 0x14aa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1482:	a1 e3       	ldi	r26, 0x31	; 49
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e1 e3       	ldi	r30, 0x31	; 49
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_setupPinDirection+0x194>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_setupPinDirection+0x190>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14aa:	a1 e3       	ldi	r26, 0x31	; 49
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e1 e3       	ldi	r30, 0x31	; 49
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_setupPinDirection+0x1bc>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_setupPinDirection+0x1b8>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_writePin+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_writePin+0x8>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
    14f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	88 30       	cpi	r24, 0x08	; 8
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <GPIO_writePin+0x1c>
    14fc:	d5 c0       	rjmp	.+426    	; 0x16a8 <GPIO_writePin+0x1c6>
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	08 f0       	brcs	.+2      	; 0x1506 <GPIO_writePin+0x24>
    1504:	d1 c0       	rjmp	.+418    	; 0x16a8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <GPIO_writePin+0x3a>
    151a:	43 c0       	rjmp	.+134    	; 0x15a2 <GPIO_writePin+0xc0>
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	3d 81       	ldd	r19, Y+5	; 0x05
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <GPIO_writePin+0x4e>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	71 f0       	breq	.+28     	; 0x154a <GPIO_writePin+0x68>
    152e:	bc c0       	rjmp	.+376    	; 0x16a8 <GPIO_writePin+0x1c6>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <GPIO_writePin+0x5a>
    153a:	5f c0       	rjmp	.+190    	; 0x15fa <GPIO_writePin+0x118>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <GPIO_writePin+0x66>
    1546:	85 c0       	rjmp	.+266    	; 0x1652 <GPIO_writePin+0x170>
    1548:	af c0       	rjmp	.+350    	; 0x16a8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	a1 f4       	brne	.+40     	; 0x1578 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1550:	ab e3       	ldi	r26, 0x3B	; 59
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e3       	ldi	r30, 0x3B	; 59
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_writePin+0x8c>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_writePin+0x88>
    1572:	84 2b       	or	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	98 c0       	rjmp	.+304    	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1578:	ab e3       	ldi	r26, 0x3B	; 59
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	eb e3       	ldi	r30, 0x3B	; 59
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0xb4>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0xb0>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	83 c0       	rjmp	.+262    	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	a1 f4       	brne	.+40     	; 0x15d0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15a8:	a8 e3       	ldi	r26, 0x38	; 56
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e8 e3       	ldi	r30, 0x38	; 56
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_writePin+0xe4>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_writePin+0xe0>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	6c c0       	rjmp	.+216    	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0x10c>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0x108>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	57 c0       	rjmp	.+174    	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	a1 f4       	brne	.+40     	; 0x1628 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1600:	a5 e3       	ldi	r26, 0x35	; 53
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_writePin+0x13c>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_writePin+0x138>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	40 c0       	rjmp	.+128    	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1628:	a5 e3       	ldi	r26, 0x35	; 53
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_writePin+0x164>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_writePin+0x160>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	2b c0       	rjmp	.+86     	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	a1 f4       	brne	.+40     	; 0x1680 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1658:	a2 e3       	ldi	r26, 0x32	; 50
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e2 e3       	ldi	r30, 0x32	; 50
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <GPIO_writePin+0x194>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <GPIO_writePin+0x190>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x1bc>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x1b8>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_readPin+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_readPin+0x8>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8a 83       	std	Y+2, r24	; 0x02
    16c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16ca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 30       	cpi	r24, 0x08	; 8
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <GPIO_readPin+0x1c>
    16d2:	84 c0       	rjmp	.+264    	; 0x17dc <GPIO_readPin+0x124>
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <GPIO_readPin+0x24>
    16da:	80 c0       	rjmp	.+256    	; 0x17dc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3d 83       	std	Y+5, r19	; 0x05
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	4c 81       	ldd	r20, Y+4	; 0x04
    16e8:	5d 81       	ldd	r21, Y+5	; 0x05
    16ea:	41 30       	cpi	r20, 0x01	; 1
    16ec:	51 05       	cpc	r21, r1
    16ee:	79 f1       	breq	.+94     	; 0x174e <GPIO_readPin+0x96>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	91 05       	cpc	r25, r1
    16f8:	34 f4       	brge	.+12     	; 0x1706 <GPIO_readPin+0x4e>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	21 15       	cp	r18, r1
    1700:	31 05       	cpc	r19, r1
    1702:	69 f0       	breq	.+26     	; 0x171e <GPIO_readPin+0x66>
    1704:	6b c0       	rjmp	.+214    	; 0x17dc <GPIO_readPin+0x124>
    1706:	4c 81       	ldd	r20, Y+4	; 0x04
    1708:	5d 81       	ldd	r21, Y+5	; 0x05
    170a:	42 30       	cpi	r20, 0x02	; 2
    170c:	51 05       	cpc	r21, r1
    170e:	b9 f1       	breq	.+110    	; 0x177e <GPIO_readPin+0xc6>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <GPIO_readPin+0x64>
    171a:	49 c0       	rjmp	.+146    	; 0x17ae <GPIO_readPin+0xf6>
    171c:	5f c0       	rjmp	.+190    	; 0x17dc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    171e:	e9 e3       	ldi	r30, 0x39	; 57
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <GPIO_readPin+0x7e>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <GPIO_readPin+0x7a>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	88 23       	and	r24, r24
    1742:	19 f0       	breq	.+6      	; 0x174a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	49 c0       	rjmp	.+146    	; 0x17dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	47 c0       	rjmp	.+142    	; 0x17dc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    174e:	e6 e3       	ldi	r30, 0x36	; 54
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_readPin+0xae>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_readPin+0xaa>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	88 23       	and	r24, r24
    1772:	19 f0       	breq	.+6      	; 0x177a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	31 c0       	rjmp	.+98     	; 0x17dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    177a:	19 82       	std	Y+1, r1	; 0x01
    177c:	2f c0       	rjmp	.+94     	; 0x17dc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_readPin+0xde>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_readPin+0xda>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	19 c0       	rjmp	.+50     	; 0x17dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17ae:	e0 e3       	ldi	r30, 0x30	; 48
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_readPin+0x10e>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_readPin+0x10a>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	88 23       	and	r24, r24
    17d2:	19 f0       	breq	.+6      	; 0x17da <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17da:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_setupPortDirection+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_setupPortDirection+0x8>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	90 f5       	brcc	.+100    	; 0x1868 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	2b 83       	std	Y+3, r18	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	d1 f0       	breq	.+52     	; 0x184c <GPIO_setupPortDirection+0x5e>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <GPIO_setupPortDirection+0x3e>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <GPIO_setupPortDirection+0x54>
    182a:	1e c0       	rjmp	.+60     	; 0x1868 <GPIO_setupPortDirection+0x7a>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <GPIO_setupPortDirection+0x68>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	81 f0       	breq	.+32     	; 0x1860 <GPIO_setupPortDirection+0x72>
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    184c:	e7 e3       	ldi	r30, 0x37	; 55
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1856:	e4 e3       	ldi	r30, 0x34	; 52
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1860:	e1 e3       	ldi	r30, 0x31	; 49
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	80 83       	st	Z, r24
			break;
		}
	}
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_writePort+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_writePort+0x8>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	90 f5       	brcc	.+100    	; 0x18f0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3c 83       	std	Y+4, r19	; 0x04
    1894:	2b 83       	std	Y+3, r18	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	d1 f0       	breq	.+52     	; 0x18d4 <GPIO_writePort+0x5e>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_writePort+0x3e>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	61 f0       	breq	.+24     	; 0x18ca <GPIO_writePort+0x54>
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <GPIO_writePort+0x7a>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <GPIO_writePort+0x68>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <GPIO_writePort+0x72>
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	80 83       	st	Z, r24
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 83       	st	Z, r24
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	80 83       	st	Z, r24
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GPIO_readPort+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <GPIO_readPort+0x8>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    190c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	84 30       	cpi	r24, 0x04	; 4
    1912:	90 f5       	brcc	.+100    	; 0x1978 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3c 83       	std	Y+4, r19	; 0x04
    191c:	2b 83       	std	Y+3, r18	; 0x03
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	91 05       	cpc	r25, r1
    1926:	d1 f0       	breq	.+52     	; 0x195c <GPIO_readPort+0x5e>
    1928:	2b 81       	ldd	r18, Y+3	; 0x03
    192a:	3c 81       	ldd	r19, Y+4	; 0x04
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	2c f4       	brge	.+10     	; 0x193c <GPIO_readPort+0x3e>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	61 f0       	breq	.+24     	; 0x1952 <GPIO_readPort+0x54>
    193a:	1e c0       	rjmp	.+60     	; 0x1978 <GPIO_readPort+0x7a>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	81 f0       	breq	.+32     	; 0x1966 <GPIO_readPort+0x68>
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	81 f0       	breq	.+32     	; 0x1970 <GPIO_readPort+0x72>
    1950:	13 c0       	rjmp	.+38     	; 0x1978 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1952:	e9 e3       	ldi	r30, 0x39	; 57
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    195c:	e6 e3       	ldi	r30, 0x36	; 54
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	09 c0       	rjmp	.+18     	; 0x1978 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1966:	e3 e3       	ldi	r30, 0x33	; 51
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1970:	e0 e3       	ldi	r30, 0x30	; 48
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <TWI_init>:

#include "i2c.h"
#include "avr/io.h"

void TWI_init(I2CConfig*ptr_config)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <TWI_init+0x6>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ptr_config->bitrate;
    1996:	a0 e2       	ldi	r26, 0x20	; 32
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e9 81       	ldd	r30, Y+1	; 0x01
    199c:	fa 81       	ldd	r31, Y+2	; 0x02
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	8c 93       	st	X, r24
	TWSR = ptr_config->prescaler;
    19a2:	a1 e2       	ldi	r26, 0x21	; 33
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	80 81       	ld	r24, Z
    19ac:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ptr_config->slave_address; // my address = 0x01 :)
    19ae:	a2 e2       	ldi	r26, 0x22	; 34
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	81 81       	ldd	r24, Z+1	; 0x01
    19b8:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    19ba:	e6 e5       	ldi	r30, 0x56	; 86
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	80 83       	st	Z, r24
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <TWI_start>:

void TWI_start(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    19d4:	e6 e5       	ldi	r30, 0x56	; 86
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	84 ea       	ldi	r24, 0xA4	; 164
    19da:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    19dc:	e6 e5       	ldi	r30, 0x56	; 86
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	88 23       	and	r24, r24
    19e4:	dc f7       	brge	.-10     	; 0x19dc <TWI_start+0x10>
}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <TWI_stop>:

void TWI_stop(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    19f4:	e6 e5       	ldi	r30, 0x56	; 86
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	84 e9       	ldi	r24, 0x94	; 148
    19fa:	80 83       	st	Z, r24
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <TWI_write>:

void TWI_write(uint8 data)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1a0e:	e3 e2       	ldi	r30, 0x23	; 35
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a16:	e6 e5       	ldi	r30, 0x56	; 86
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	84 e8       	ldi	r24, 0x84	; 132
    1a1c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a1e:	e6 e5       	ldi	r30, 0x56	; 86
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 23       	and	r24, r24
    1a26:	dc f7       	brge	.-10     	; 0x1a1e <TWI_write+0x1c>
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a38:	e6 e5       	ldi	r30, 0x56	; 86
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	84 ec       	ldi	r24, 0xC4	; 196
    1a3e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a40:	e6 e5       	ldi	r30, 0x56	; 86
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	88 23       	and	r24, r24
    1a48:	dc f7       	brge	.-10     	; 0x1a40 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1a4a:	e3 e2       	ldi	r30, 0x23	; 35
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	84 e8       	ldi	r24, 0x84	; 132
    1a64:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a66:	e6 e5       	ldi	r30, 0x56	; 86
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 23       	and	r24, r24
    1a6e:	dc f7       	brge	.-10     	; 0x1a66 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1a70:	e3 e2       	ldi	r30, 0x23	; 35
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1a86:	e1 e2       	ldi	r30, 0x21	; 33
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 7f       	andi	r24, 0xF8	; 248
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	64 e0       	ldi	r22, 0x04	; 4
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	65 e0       	ldi	r22, 0x05	; 5
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	66 e0       	ldi	r22, 0x06	; 6
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 86 09 	call	0x130c	; 0x130c <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	6f ef       	ldi	r22, 0xFF	; 255
    1ac4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ac8:	88 e3       	ldi	r24, 0x38	; 56
    1aca:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ace:	8c e0       	ldi	r24, 0x0C	; 12
    1ad0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_sendCommand>
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	e9 97       	sbiw	r28, 0x39	; 57
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	65 e0       	ldi	r22, 0x05	; 5
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e8       	ldi	r26, 0x80	; 128
    1b10:	bf e3       	ldi	r27, 0x3F	; 63
    1b12:	8d ab       	std	Y+53, r24	; 0x35
    1b14:	9e ab       	std	Y+54, r25	; 0x36
    1b16:	af ab       	std	Y+55, r26	; 0x37
    1b18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b20:	98 ad       	ldd	r25, Y+56	; 0x38
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a e7       	ldi	r20, 0x7A	; 122
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	89 ab       	std	Y+49, r24	; 0x31
    1b34:	9a ab       	std	Y+50, r25	; 0x32
    1b36:	ab ab       	std	Y+51, r26	; 0x33
    1b38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b40:	9c a9       	ldd	r25, Y+52	; 0x34
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b60:	8b a9       	ldd	r24, Y+51	; 0x33
    1b62:	9c a9       	ldd	r25, Y+52	; 0x34
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	6d a9       	ldd	r22, Y+53	; 0x35
    1b76:	7e a9       	ldd	r23, Y+54	; 0x36
    1b78:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	98 ab       	std	Y+48, r25	; 0x30
    1b9a:	8f a7       	std	Y+47, r24	; 0x2f
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <LCD_sendCommand+0xdc>
    1b9e:	89 e1       	ldi	r24, 0x19	; 25
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9e a7       	std	Y+46, r25	; 0x2e
    1ba4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0xca>
    1bae:	9e a7       	std	Y+46, r25	; 0x2e
    1bb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	98 ab       	std	Y+48, r25	; 0x30
    1bba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <LCD_sendCommand+0xbe>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bca:	8b a9       	ldd	r24, Y+51	; 0x33
    1bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	98 ab       	std	Y+48, r25	; 0x30
    1bd8:	8f a7       	std	Y+47, r24	; 0x2f
    1bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bde:	9c a7       	std	Y+44, r25	; 0x2c
    1be0:	8b a7       	std	Y+43, r24	; 0x2b
    1be2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_sendCommand+0x106>
    1bea:	9c a7       	std	Y+44, r25	; 0x2c
    1bec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	66 e0       	ldi	r22, 0x06	; 6
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e8       	ldi	r26, 0x80	; 128
    1bfe:	bf e3       	ldi	r27, 0x3F	; 63
    1c00:	8f a3       	std	Y+39, r24	; 0x27
    1c02:	98 a7       	std	Y+40, r25	; 0x28
    1c04:	a9 a7       	std	Y+41, r26	; 0x29
    1c06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8b a3       	std	Y+35, r24	; 0x23
    1c22:	9c a3       	std	Y+36, r25	; 0x24
    1c24:	ad a3       	std	Y+37, r26	; 0x25
    1c26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	9e a1       	ldd	r25, Y+38	; 0x26
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6f a1       	ldd	r22, Y+39	; 0x27
    1c64:	78 a5       	ldd	r23, Y+40	; 0x28
    1c66:	89 a5       	ldd	r24, Y+41	; 0x29
    1c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <LCD_sendCommand+0x1ca>
    1c8c:	89 e1       	ldi	r24, 0x19	; 25
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	98 a3       	std	Y+32, r25	; 0x20
    1c92:	8f 8f       	std	Y+31, r24	; 0x1f
    1c94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c96:	98 a1       	ldd	r25, Y+32	; 0x20
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x1b8>
    1c9c:	98 a3       	std	Y+32, r25	; 0x20
    1c9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a a1       	ldd	r25, Y+34	; 0x22
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <LCD_sendCommand+0x1ac>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cba:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9a a3       	std	Y+34, r25	; 0x22
    1cc6:	89 a3       	std	Y+33, r24	; 0x21
    1cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ccc:	9e 8f       	std	Y+30, r25	; 0x1e
    1cce:	8d 8f       	std	Y+29, r24	; 0x1d
    1cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_sendCommand+0x1f4>
    1cd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	69 ad       	ldd	r22, Y+57	; 0x39
    1ce0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_writePort>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	89 8f       	std	Y+25, r24	; 0x19
    1cee:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	53 e4       	ldi	r21, 0x43	; 67
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8d 8b       	std	Y+21, r24	; 0x15
    1d0e:	9e 8b       	std	Y+22, r25	; 0x16
    1d10:	af 8b       	std	Y+23, r26	; 0x17
    1d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_sendCommand+0x256>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_sendCommand+0x2b6>
    1d78:	89 e1       	ldi	r24, 0x19	; 25
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
    1d80:	89 89       	ldd	r24, Y+17	; 0x11
    1d82:	9a 89       	ldd	r25, Y+18	; 0x12
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_sendCommand+0x2a4>
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_sendCommand+0x298>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6d 89       	ldd	r22, Y+21	; 0x15
    1da2:	7e 89       	ldd	r23, Y+22	; 0x16
    1da4:	8f 89       	ldd	r24, Y+23	; 0x17
    1da6:	98 8d       	ldd	r25, Y+24	; 0x18
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	8b 89       	ldd	r24, Y+19	; 0x13
    1db6:	9c 89       	ldd	r25, Y+20	; 0x14
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	98 89       	ldd	r25, Y+16	; 0x10
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_sendCommand+0x2e0>
    1dc4:	98 8b       	std	Y+16, r25	; 0x10
    1dc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	66 e0       	ldi	r22, 0x06	; 6
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a e7       	ldi	r20, 0x7A	; 122
    1df0:	53 e4       	ldi	r21, 0x43	; 67
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_sendCommand+0x344>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_sendCommand+0x3a4>
    1e66:	89 e1       	ldi	r24, 0x19	; 25
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_sendCommand+0x392>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_sendCommand+0x386>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_sendCommand+0x3ce>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1eb6:	e9 96       	adiw	r28, 0x39	; 57
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	e9 97       	sbiw	r28, 0x39	; 57
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	64 e0       	ldi	r22, 0x04	; 4
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	bf e3       	ldi	r27, 0x3F	; 63
    1efa:	8d ab       	std	Y+53, r24	; 0x35
    1efc:	9e ab       	std	Y+54, r25	; 0x36
    1efe:	af ab       	std	Y+55, r26	; 0x37
    1f00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6d a9       	ldd	r22, Y+53	; 0x35
    1f04:	7e a9       	ldd	r23, Y+54	; 0x36
    1f06:	8f a9       	ldd	r24, Y+55	; 0x37
    1f08:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a e7       	ldi	r20, 0x7A	; 122
    1f10:	53 e4       	ldi	r21, 0x43	; 67
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	89 ab       	std	Y+49, r24	; 0x31
    1f1c:	9a ab       	std	Y+50, r25	; 0x32
    1f1e:	ab ab       	std	Y+51, r26	; 0x33
    1f20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f22:	69 a9       	ldd	r22, Y+49	; 0x31
    1f24:	7a a9       	ldd	r23, Y+50	; 0x32
    1f26:	8b a9       	ldd	r24, Y+51	; 0x33
    1f28:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1f44:	69 a9       	ldd	r22, Y+49	; 0x31
    1f46:	7a a9       	ldd	r23, Y+50	; 0x32
    1f48:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f60:	8f a9       	ldd	r24, Y+55	; 0x37
    1f62:	98 ad       	ldd	r25, Y+56	; 0x38
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	8f a7       	std	Y+47, r24	; 0x2f
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <LCD_displayCharacter+0xdc>
    1f86:	89 e1       	ldi	r24, 0x19	; 25
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e a7       	std	Y+46, r25	; 0x2e
    1f8c:	8d a7       	std	Y+45, r24	; 0x2d
    1f8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_displayCharacter+0xca>
    1f96:	9e a7       	std	Y+46, r25	; 0x2e
    1f98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	98 ab       	std	Y+48, r25	; 0x30
    1fa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <LCD_displayCharacter+0xbe>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc6:	9c a7       	std	Y+44, r25	; 0x2c
    1fc8:	8b a7       	std	Y+43, r24	; 0x2b
    1fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_displayCharacter+0x106>
    1fd2:	9c a7       	std	Y+44, r25	; 0x2c
    1fd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	66 e0       	ldi	r22, 0x06	; 6
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e8       	ldi	r26, 0x80	; 128
    1fe6:	bf e3       	ldi	r27, 0x3F	; 63
    1fe8:	8f a3       	std	Y+39, r24	; 0x27
    1fea:	98 a7       	std	Y+40, r25	; 0x28
    1fec:	a9 a7       	std	Y+41, r26	; 0x29
    1fee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	53 e4       	ldi	r21, 0x43	; 67
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8b a3       	std	Y+35, r24	; 0x23
    200a:	9c a3       	std	Y+36, r25	; 0x24
    200c:	ad a3       	std	Y+37, r26	; 0x25
    200e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2010:	6b a1       	ldd	r22, Y+35	; 0x23
    2012:	7c a1       	ldd	r23, Y+36	; 0x24
    2014:	8d a1       	ldd	r24, Y+37	; 0x25
    2016:	9e a1       	ldd	r25, Y+38	; 0x26
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2032:	6b a1       	ldd	r22, Y+35	; 0x23
    2034:	7c a1       	ldd	r23, Y+36	; 0x24
    2036:	8d a1       	ldd	r24, Y+37	; 0x25
    2038:	9e a1       	ldd	r25, Y+38	; 0x26
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	6f a1       	ldd	r22, Y+39	; 0x27
    204c:	78 a5       	ldd	r23, Y+40	; 0x28
    204e:	89 a5       	ldd	r24, Y+41	; 0x29
    2050:	9a a5       	ldd	r25, Y+42	; 0x2a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <LCD_displayCharacter+0x1ca>
    2074:	89 e1       	ldi	r24, 0x19	; 25
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	98 a3       	std	Y+32, r25	; 0x20
    207a:	8f 8f       	std	Y+31, r24	; 0x1f
    207c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    207e:	98 a1       	ldd	r25, Y+32	; 0x20
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_displayCharacter+0x1b8>
    2084:	98 a3       	std	Y+32, r25	; 0x20
    2086:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	89 a1       	ldd	r24, Y+33	; 0x21
    208a:	9a a1       	ldd	r25, Y+34	; 0x22
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	9a a1       	ldd	r25, Y+34	; 0x22
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <LCD_displayCharacter+0x1ac>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9a a3       	std	Y+34, r25	; 0x22
    20ae:	89 a3       	std	Y+33, r24	; 0x21
    20b0:	89 a1       	ldd	r24, Y+33	; 0x21
    20b2:	9a a1       	ldd	r25, Y+34	; 0x22
    20b4:	9e 8f       	std	Y+30, r25	; 0x1e
    20b6:	8d 8f       	std	Y+29, r24	; 0x1d
    20b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_displayCharacter+0x1f4>
    20c0:	9e 8f       	std	Y+30, r25	; 0x1e
    20c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	69 ad       	ldd	r22, Y+57	; 0x39
    20c8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <GPIO_writePort>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e8       	ldi	r26, 0x80	; 128
    20d2:	bf e3       	ldi	r27, 0x3F	; 63
    20d4:	89 8f       	std	Y+25, r24	; 0x19
    20d6:	9a 8f       	std	Y+26, r25	; 0x1a
    20d8:	ab 8f       	std	Y+27, r26	; 0x1b
    20da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	69 8d       	ldd	r22, Y+25	; 0x19
    20de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a e7       	ldi	r20, 0x7A	; 122
    20ea:	53 e4       	ldi	r21, 0x43	; 67
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8d 8b       	std	Y+21, r24	; 0x15
    20f6:	9e 8b       	std	Y+22, r25	; 0x16
    20f8:	af 8b       	std	Y+23, r26	; 0x17
    20fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
    211c:	3f c0       	rjmp	.+126    	; 0x219c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_displayCharacter+0x2b6>
    2160:	89 e1       	ldi	r24, 0x19	; 25
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9a 8b       	std	Y+18, r25	; 0x12
    2166:	89 8b       	std	Y+17, r24	; 0x11
    2168:	89 89       	ldd	r24, Y+17	; 0x11
    216a:	9a 89       	ldd	r25, Y+18	; 0x12
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_displayCharacter+0x2a4>
    2170:	9a 8b       	std	Y+18, r25	; 0x12
    2172:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8b 89       	ldd	r24, Y+19	; 0x13
    2176:	9c 89       	ldd	r25, Y+20	; 0x14
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <LCD_displayCharacter+0x298>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6d 89       	ldd	r22, Y+21	; 0x15
    218a:	7e 89       	ldd	r23, Y+22	; 0x16
    218c:	8f 89       	ldd	r24, Y+23	; 0x17
    218e:	98 8d       	ldd	r25, Y+24	; 0x18
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	98 8b       	std	Y+16, r25	; 0x10
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
    21a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a6:	98 89       	ldd	r25, Y+16	; 0x10
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_displayCharacter+0x2e0>
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_writePin>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e8       	ldi	r26, 0x80	; 128
    21c0:	bf e3       	ldi	r27, 0x3F	; 63
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
    21c4:	9c 87       	std	Y+12, r25	; 0x0c
    21c6:	ad 87       	std	Y+13, r26	; 0x0d
    21c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8f 83       	std	Y+7, r24	; 0x07
    21e4:	98 87       	std	Y+8, r25	; 0x08
    21e6:	a9 87       	std	Y+9, r26	; 0x09
    21e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <LCD_displayCharacter+0x344>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	3f c0       	rjmp	.+126    	; 0x228a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	0f c0       	rjmp	.+30     	; 0x226c <LCD_displayCharacter+0x3a4>
    224e:	89 e1       	ldi	r24, 0x19	; 25
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_displayCharacter+0x392>
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <LCD_displayCharacter+0x386>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_displayCharacter+0x3ce>
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    229e:	e9 96       	adiw	r28, 0x39	; 57
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <LCD_displayString+0x6>
    22b6:	0f 92       	push	r0
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9b 83       	std	Y+3, r25	; 0x03
    22be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22c0:	19 82       	std	Y+1, r1	; 0x01
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	9b 81       	ldd	r25, Y+3	; 0x03
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	80 81       	ld	r24, Z
    22d6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_displayCharacter>
		i++;
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	8f 5f       	subi	r24, 0xFF	; 255
    22de:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	fc 01       	movw	r30, r24
    22ec:	e2 0f       	add	r30, r18
    22ee:	f3 1f       	adc	r31, r19
    22f0:	80 81       	ld	r24, Z
    22f2:	88 23       	and	r24, r24
    22f4:	39 f7       	brne	.-50     	; 0x22c4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <LCD_moveCursor+0x6>
    2308:	00 d0       	rcall	.+0      	; 0x230a <LCD_moveCursor+0x8>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	8a 83       	std	Y+2, r24	; 0x02
    2312:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	3d 83       	std	Y+5, r19	; 0x05
    231c:	2c 83       	std	Y+4, r18	; 0x04
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	9d 81       	ldd	r25, Y+5	; 0x05
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	91 05       	cpc	r25, r1
    2326:	c1 f0       	breq	.+48     	; 0x2358 <LCD_moveCursor+0x56>
    2328:	2c 81       	ldd	r18, Y+4	; 0x04
    232a:	3d 81       	ldd	r19, Y+5	; 0x05
    232c:	22 30       	cpi	r18, 0x02	; 2
    232e:	31 05       	cpc	r19, r1
    2330:	2c f4       	brge	.+10     	; 0x233c <LCD_moveCursor+0x3a>
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	61 f0       	breq	.+24     	; 0x2352 <LCD_moveCursor+0x50>
    233a:	19 c0       	rjmp	.+50     	; 0x236e <LCD_moveCursor+0x6c>
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	3d 81       	ldd	r19, Y+5	; 0x05
    2340:	22 30       	cpi	r18, 0x02	; 2
    2342:	31 05       	cpc	r19, r1
    2344:	69 f0       	breq	.+26     	; 0x2360 <LCD_moveCursor+0x5e>
    2346:	8c 81       	ldd	r24, Y+4	; 0x04
    2348:	9d 81       	ldd	r25, Y+5	; 0x05
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	91 05       	cpc	r25, r1
    234e:	61 f0       	breq	.+24     	; 0x2368 <LCD_moveCursor+0x66>
    2350:	0e c0       	rjmp	.+28     	; 0x236e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	0b c0       	rjmp	.+22     	; 0x236e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	80 5c       	subi	r24, 0xC0	; 192
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	07 c0       	rjmp	.+14     	; 0x236e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	80 5f       	subi	r24, 0xF0	; 240
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	03 c0       	rjmp	.+6      	; 0x236e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	80 5b       	subi	r24, 0xB0	; 176
    236c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_sendCommand>
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <LCD_displayStringRowColumn+0x6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <LCD_displayStringRowColumn+0x8>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	6a 83       	std	Y+2, r22	; 0x02
    2396:	5c 83       	std	Y+4, r21	; 0x04
    2398:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	6a 81       	ldd	r22, Y+2	; 0x02
    239e:	0e 94 81 11 	call	0x2302	; 0x2302 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_displayString>
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	62 97       	sbiw	r28, 0x12	; 18
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	9a 8b       	std	Y+18, r25	; 0x12
    23ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    23d0:	89 89       	ldd	r24, Y+17	; 0x11
    23d2:	9a 89       	ldd	r25, Y+18	; 0x12
    23d4:	9e 01       	movw	r18, r28
    23d6:	2f 5f       	subi	r18, 0xFF	; 255
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	b9 01       	movw	r22, r18
    23dc:	4a e0       	ldi	r20, 0x0A	; 10
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	0e 94 05 18 	call	0x300a	; 0x300a <itoa>
   LCD_displayString(buff); /* Display the string */
    23e4:	ce 01       	movw	r24, r28
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_displayString>
}
    23ec:	62 96       	adiw	r28, 0x12	; 18
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <LCD_sendCommand>
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <main>:
void check_pw(uint8*password,uint8*check_password);
void eeprom_save_password(uint8*password);
void eeprom_load_password(uint8*password);
volatile uint8 check_flag=1;
int main(void)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	af 97       	sbiw	r28, 0x2f	; 47
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61

	unsigned char password[4];
	unsigned char check_password[4];
	TimerConfig Timer0_Config = {Normal,F_CPU_1024,0,0};
    2426:	ce 01       	movw	r24, r28
    2428:	49 96       	adiw	r24, 0x19	; 25
    242a:	9f a3       	std	Y+39, r25	; 0x27
    242c:	8e a3       	std	Y+38, r24	; 0x26
    242e:	e3 e7       	ldi	r30, 0x73	; 115
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	f9 a7       	std	Y+41, r31	; 0x29
    2434:	e8 a7       	std	Y+40, r30	; 0x28
    2436:	f6 e0       	ldi	r31, 0x06	; 6
    2438:	fa a7       	std	Y+42, r31	; 0x2a
    243a:	e8 a5       	ldd	r30, Y+40	; 0x28
    243c:	f9 a5       	ldd	r31, Y+41	; 0x29
    243e:	00 80       	ld	r0, Z
    2440:	88 a5       	ldd	r24, Y+40	; 0x28
    2442:	99 a5       	ldd	r25, Y+41	; 0x29
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	99 a7       	std	Y+41, r25	; 0x29
    2448:	88 a7       	std	Y+40, r24	; 0x28
    244a:	ee a1       	ldd	r30, Y+38	; 0x26
    244c:	ff a1       	ldd	r31, Y+39	; 0x27
    244e:	00 82       	st	Z, r0
    2450:	8e a1       	ldd	r24, Y+38	; 0x26
    2452:	9f a1       	ldd	r25, Y+39	; 0x27
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	9f a3       	std	Y+39, r25	; 0x27
    2458:	8e a3       	std	Y+38, r24	; 0x26
    245a:	9a a5       	ldd	r25, Y+42	; 0x2a
    245c:	91 50       	subi	r25, 0x01	; 1
    245e:	9a a7       	std	Y+42, r25	; 0x2a
    2460:	ea a5       	ldd	r30, Y+42	; 0x2a
    2462:	ee 23       	and	r30, r30
    2464:	51 f7       	brne	.-44     	; 0x243a <main+0x28>
	Timer0_Init(&Timer0_Config);
    2466:	ce 01       	movw	r24, r28
    2468:	49 96       	adiw	r24, 0x19	; 25
    246a:	0e 94 b0 07 	call	0xf60	; 0xf60 <Timer0_Init>
	UART_Config uart_config = {9600,ASYNC,BIT1,DISABLED};
    246e:	ce 01       	movw	r24, r28
    2470:	4f 96       	adiw	r24, 0x1f	; 31
    2472:	9c a7       	std	Y+44, r25	; 0x2c
    2474:	8b a7       	std	Y+43, r24	; 0x2b
    2476:	ec e6       	ldi	r30, 0x6C	; 108
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	fe a7       	std	Y+46, r31	; 0x2e
    247c:	ed a7       	std	Y+45, r30	; 0x2d
    247e:	f7 e0       	ldi	r31, 0x07	; 7
    2480:	ff a7       	std	Y+47, r31	; 0x2f
    2482:	ed a5       	ldd	r30, Y+45	; 0x2d
    2484:	fe a5       	ldd	r31, Y+46	; 0x2e
    2486:	00 80       	ld	r0, Z
    2488:	8d a5       	ldd	r24, Y+45	; 0x2d
    248a:	9e a5       	ldd	r25, Y+46	; 0x2e
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	9e a7       	std	Y+46, r25	; 0x2e
    2490:	8d a7       	std	Y+45, r24	; 0x2d
    2492:	eb a5       	ldd	r30, Y+43	; 0x2b
    2494:	fc a5       	ldd	r31, Y+44	; 0x2c
    2496:	00 82       	st	Z, r0
    2498:	8b a5       	ldd	r24, Y+43	; 0x2b
    249a:	9c a5       	ldd	r25, Y+44	; 0x2c
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	9c a7       	std	Y+44, r25	; 0x2c
    24a0:	8b a7       	std	Y+43, r24	; 0x2b
    24a2:	9f a5       	ldd	r25, Y+47	; 0x2f
    24a4:	91 50       	subi	r25, 0x01	; 1
    24a6:	9f a7       	std	Y+47, r25	; 0x2f
    24a8:	ef a5       	ldd	r30, Y+47	; 0x2f
    24aa:	ee 23       	and	r30, r30
    24ac:	51 f7       	brne	.-44     	; 0x2482 <main+0x70>
	UART_init(&uart_config);
    24ae:	ce 01       	movw	r24, r28
    24b0:	4f 96       	adiw	r24, 0x1f	; 31
    24b2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <UART_init>
	DcMotor_Init();
    24b6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <DcMotor_Init>
	Buzzer_Init();
    24ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_Init>
	UART_sendByte(MC2_READY);
    24be:	80 e1       	ldi	r24, 0x10	; 16
    24c0:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <UART_sendByte>
	SREG |= (1<<7);
    24c4:	af e5       	ldi	r26, 0x5F	; 95
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ef e5       	ldi	r30, 0x5F	; 95
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8c 93       	st	X, r24
	do
	{
		receive_password(password);
    24d2:	ce 01       	movw	r24, r28
    24d4:	41 96       	adiw	r24, 0x11	; 17
    24d6:	0e 94 98 13 	call	0x2730	; 0x2730 <receive_password>
		receive_password(check_password);
    24da:	ce 01       	movw	r24, r28
    24dc:	45 96       	adiw	r24, 0x15	; 21
    24de:	0e 94 98 13 	call	0x2730	; 0x2730 <receive_password>
		check_pw(password,check_password);
    24e2:	ce 01       	movw	r24, r28
    24e4:	41 96       	adiw	r24, 0x11	; 17
    24e6:	9e 01       	movw	r18, r28
    24e8:	2b 5e       	subi	r18, 0xEB	; 235
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	b9 01       	movw	r22, r18
    24ee:	0e 94 ae 14 	call	0x295c	; 0x295c <check_pw>
	}
	while(check_flag==0);
    24f2:	80 91 68 00 	lds	r24, 0x0068
    24f6:	88 23       	and	r24, r24
    24f8:	61 f3       	breq	.-40     	; 0x24d2 <main+0xc0>
	eeprom_save_password(password);
    24fa:	ce 01       	movw	r24, r28
    24fc:	41 96       	adiw	r24, 0x11	; 17
    24fe:	0e 94 65 15 	call	0x2aca	; 0x2aca <eeprom_save_password>
	while(1)
	{
		uint8 command=UART_recieveByte();
    2502:	0e 94 31 17 	call	0x2e62	; 0x2e62 <UART_recieveByte>
    2506:	88 8b       	std	Y+16, r24	; 0x10
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a8 ec       	ldi	r26, 0xC8	; 200
    250e:	b2 e4       	ldi	r27, 0x42	; 66
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <main+0x148>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <main+0x1c6>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <main+0x1a8>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <main+0x196>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <main+0x18a>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <main+0x1d2>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if(command=='-')
    25ec:	88 89       	ldd	r24, Y+16	; 0x10
    25ee:	8d 32       	cpi	r24, 0x2D	; 45
    25f0:	c9 f4       	brne	.+50     	; 0x2624 <main+0x212>
		{
			do
			{
				receive_password(password);
    25f2:	ce 01       	movw	r24, r28
    25f4:	41 96       	adiw	r24, 0x11	; 17
    25f6:	0e 94 98 13 	call	0x2730	; 0x2730 <receive_password>
				receive_password(check_password);
    25fa:	ce 01       	movw	r24, r28
    25fc:	45 96       	adiw	r24, 0x15	; 21
    25fe:	0e 94 98 13 	call	0x2730	; 0x2730 <receive_password>
				check_pw(password,check_password);
    2602:	ce 01       	movw	r24, r28
    2604:	41 96       	adiw	r24, 0x11	; 17
    2606:	9e 01       	movw	r18, r28
    2608:	2b 5e       	subi	r18, 0xEB	; 235
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	b9 01       	movw	r22, r18
    260e:	0e 94 ae 14 	call	0x295c	; 0x295c <check_pw>
			}
			while(check_flag==0);
    2612:	80 91 68 00 	lds	r24, 0x0068
    2616:	88 23       	and	r24, r24
    2618:	61 f3       	breq	.-40     	; 0x25f2 <main+0x1e0>
			eeprom_save_password(password);
    261a:	ce 01       	movw	r24, r28
    261c:	41 96       	adiw	r24, 0x11	; 17
    261e:	0e 94 65 15 	call	0x2aca	; 0x2aca <eeprom_save_password>
    2622:	6f cf       	rjmp	.-290    	; 0x2502 <main+0xf0>
		}
		else if(command=='+')
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	8b 32       	cpi	r24, 0x2B	; 43
    2628:	09 f0       	breq	.+2      	; 0x262c <main+0x21a>
    262a:	6b cf       	rjmp	.-298    	; 0x2502 <main+0xf0>
		{
			eeprom_load_password(password);
    262c:	ce 01       	movw	r24, r28
    262e:	41 96       	adiw	r24, 0x11	; 17
    2630:	0e 94 08 16 	call	0x2c10	; 0x2c10 <eeprom_load_password>
			uint8 count=0;
    2634:	1f 86       	std	Y+15, r1	; 0x0f
			do
			{
				count++;
    2636:	8f 85       	ldd	r24, Y+15	; 0x0f
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	8f 87       	std	Y+15, r24	; 0x0f
				receive_password(check_password);
    263c:	ce 01       	movw	r24, r28
    263e:	45 96       	adiw	r24, 0x15	; 21
    2640:	0e 94 98 13 	call	0x2730	; 0x2730 <receive_password>
				check_pw(password,check_password);
    2644:	ce 01       	movw	r24, r28
    2646:	41 96       	adiw	r24, 0x11	; 17
    2648:	9e 01       	movw	r18, r28
    264a:	2b 5e       	subi	r18, 0xEB	; 235
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	b9 01       	movw	r22, r18
    2650:	0e 94 ae 14 	call	0x295c	; 0x295c <check_pw>
			}
			while(check_flag==0&&count<3);
    2654:	80 91 68 00 	lds	r24, 0x0068
    2658:	88 23       	and	r24, r24
    265a:	19 f4       	brne	.+6      	; 0x2662 <main+0x250>
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	50 f3       	brcs	.-44     	; 0x2636 <main+0x224>
			if(check_flag==1)
    2662:	80 91 68 00 	lds	r24, 0x0068
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	09 f0       	breq	.+2      	; 0x266c <main+0x25a>
    266a:	43 c0       	rjmp	.+134    	; 0x26f2 <main+0x2e0>
			{
				Timer0_seconds_MC2=0;
    266c:	10 92 7e 00 	sts	0x007E, r1
    2670:	10 92 7f 00 	sts	0x007F, r1
    2674:	10 92 80 00 	sts	0x0080, r1
    2678:	10 92 81 00 	sts	0x0081, r1
    267c:	04 c0       	rjmp	.+8      	; 0x2686 <main+0x274>
				while(Timer0_seconds_MC2<15)Timer0_setCallBack(DcMotor_Rotate_Clockwise);
    267e:	8b ef       	ldi	r24, 0xFB	; 251
    2680:	95 e0       	ldi	r25, 0x05	; 5
    2682:	0e 94 8a 08 	call	0x1114	; 0x1114 <Timer0_setCallBack>
    2686:	80 91 7e 00 	lds	r24, 0x007E
    268a:	90 91 7f 00 	lds	r25, 0x007F
    268e:	a0 91 80 00 	lds	r26, 0x0080
    2692:	b0 91 81 00 	lds	r27, 0x0081
    2696:	8f 30       	cpi	r24, 0x0F	; 15
    2698:	91 05       	cpc	r25, r1
    269a:	a1 05       	cpc	r26, r1
    269c:	b1 05       	cpc	r27, r1
    269e:	78 f3       	brcs	.-34     	; 0x267e <main+0x26c>
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <main+0x298>
				while(Timer0_seconds_MC2<18)Timer0_setCallBack(DcMotor_Stop);
    26a2:	83 e2       	ldi	r24, 0x23	; 35
    26a4:	96 e0       	ldi	r25, 0x06	; 6
    26a6:	0e 94 8a 08 	call	0x1114	; 0x1114 <Timer0_setCallBack>
    26aa:	80 91 7e 00 	lds	r24, 0x007E
    26ae:	90 91 7f 00 	lds	r25, 0x007F
    26b2:	a0 91 80 00 	lds	r26, 0x0080
    26b6:	b0 91 81 00 	lds	r27, 0x0081
    26ba:	82 31       	cpi	r24, 0x12	; 18
    26bc:	91 05       	cpc	r25, r1
    26be:	a1 05       	cpc	r26, r1
    26c0:	b1 05       	cpc	r27, r1
    26c2:	78 f3       	brcs	.-34     	; 0x26a2 <main+0x290>
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <main+0x2bc>
				while(Timer0_seconds_MC2<33)Timer0_setCallBack(DcMotor_Rotate_AntiClockwise);
    26c6:	8f e0       	ldi	r24, 0x0F	; 15
    26c8:	96 e0       	ldi	r25, 0x06	; 6
    26ca:	0e 94 8a 08 	call	0x1114	; 0x1114 <Timer0_setCallBack>
    26ce:	80 91 7e 00 	lds	r24, 0x007E
    26d2:	90 91 7f 00 	lds	r25, 0x007F
    26d6:	a0 91 80 00 	lds	r26, 0x0080
    26da:	b0 91 81 00 	lds	r27, 0x0081
    26de:	81 32       	cpi	r24, 0x21	; 33
    26e0:	91 05       	cpc	r25, r1
    26e2:	a1 05       	cpc	r26, r1
    26e4:	b1 05       	cpc	r27, r1
    26e6:	78 f3       	brcs	.-34     	; 0x26c6 <main+0x2b4>
				Timer0_setCallBack(DcMotor_Stop);
    26e8:	83 e2       	ldi	r24, 0x23	; 35
    26ea:	96 e0       	ldi	r25, 0x06	; 6
    26ec:	0e 94 8a 08 	call	0x1114	; 0x1114 <Timer0_setCallBack>
    26f0:	08 cf       	rjmp	.-496    	; 0x2502 <main+0xf0>
			}
			else if(check_flag==0)
    26f2:	80 91 68 00 	lds	r24, 0x0068
    26f6:	88 23       	and	r24, r24
    26f8:	09 f0       	breq	.+2      	; 0x26fc <main+0x2ea>
    26fa:	03 cf       	rjmp	.-506    	; 0x2502 <main+0xf0>
			{
				/* activate Puzzer*/
				Buzzer_On();
    26fc:	0e 94 be 05 	call	0xb7c	; 0xb7c <Buzzer_On>
				Timer0_seconds_MC2 = 0;
    2700:	10 92 7e 00 	sts	0x007E, r1
    2704:	10 92 7f 00 	sts	0x007F, r1
    2708:	10 92 80 00 	sts	0x0080, r1
    270c:	10 92 81 00 	sts	0x0081, r1
				while ( Timer0_seconds_MC2 <= 60);         			// Lock Mc for 60 seconds
    2710:	80 91 7e 00 	lds	r24, 0x007E
    2714:	90 91 7f 00 	lds	r25, 0x007F
    2718:	a0 91 80 00 	lds	r26, 0x0080
    271c:	b0 91 81 00 	lds	r27, 0x0081
    2720:	8d 33       	cpi	r24, 0x3D	; 61
    2722:	91 05       	cpc	r25, r1
    2724:	a1 05       	cpc	r26, r1
    2726:	b1 05       	cpc	r27, r1
    2728:	98 f3       	brcs	.-26     	; 0x2710 <main+0x2fe>
				Buzzer_Off();
    272a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Buzzer_Off>
    272e:	e9 ce       	rjmp	.-558    	; 0x2502 <main+0xf0>

00002730 <receive_password>:


	}
}
void receive_password(uint8*password)
{
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	a0 97       	sbiw	r28, 0x20	; 32
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	98 a3       	std	Y+32, r25	; 0x20
    274a:	8f 8f       	std	Y+31, r24	; 0x1f
	for(int i=0;i<4;i++)
    274c:	1e 8e       	std	Y+30, r1	; 0x1e
    274e:	1d 8e       	std	Y+29, r1	; 0x1d
    2750:	82 c0       	rjmp	.+260    	; 0x2856 <receive_password+0x126>
	{
		password[i]=UART_recieveByte();
    2752:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2754:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2756:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2758:	98 a1       	ldd	r25, Y+32	; 0x20
    275a:	8c 01       	movw	r16, r24
    275c:	02 0f       	add	r16, r18
    275e:	13 1f       	adc	r17, r19
    2760:	0e 94 31 17 	call	0x2e62	; 0x2e62 <UART_recieveByte>
    2764:	f8 01       	movw	r30, r16
    2766:	80 83       	st	Z, r24
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a8 ec       	ldi	r26, 0xC8	; 200
    276e:	b2 e4       	ldi	r27, 0x42	; 66
    2770:	89 8f       	std	Y+25, r24	; 0x19
    2772:	9a 8f       	std	Y+26, r25	; 0x1a
    2774:	ab 8f       	std	Y+27, r26	; 0x1b
    2776:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8d 8b       	std	Y+21, r24	; 0x15
    2792:	9e 8b       	std	Y+22, r25	; 0x16
    2794:	af 8b       	std	Y+23, r26	; 0x17
    2796:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <receive_password+0x8a>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <receive_password+0x108>
	else if (__tmp > 65535)
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <receive_password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	69 8d       	ldd	r22, Y+25	; 0x19
    27d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9c 8b       	std	Y+20, r25	; 0x14
    27f8:	8b 8b       	std	Y+19, r24	; 0x13
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <receive_password+0xea>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
    2804:	89 89       	ldd	r24, Y+17	; 0x11
    2806:	9a 89       	ldd	r25, Y+18	; 0x12
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <receive_password+0xd8>
    280c:	9a 8b       	std	Y+18, r25	; 0x12
    280e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8b 89       	ldd	r24, Y+19	; 0x13
    2812:	9c 89       	ldd	r25, Y+20	; 0x14
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8b 89       	ldd	r24, Y+19	; 0x13
    281c:	9c 89       	ldd	r25, Y+20	; 0x14
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <receive_password+0xcc>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <receive_password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6d 89       	ldd	r22, Y+21	; 0x15
    2826:	7e 89       	ldd	r23, Y+22	; 0x16
    2828:	8f 89       	ldd	r24, Y+23	; 0x17
    282a:	98 8d       	ldd	r25, Y+24	; 0x18
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	8b 89       	ldd	r24, Y+19	; 0x13
    283a:	9c 89       	ldd	r25, Y+20	; 0x14
    283c:	98 8b       	std	Y+16, r25	; 0x10
    283e:	8f 87       	std	Y+15, r24	; 0x0f
    2840:	8f 85       	ldd	r24, Y+15	; 0x0f
    2842:	98 89       	ldd	r25, Y+16	; 0x10
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <receive_password+0x114>
    2848:	98 8b       	std	Y+16, r25	; 0x10
    284a:	8f 87       	std	Y+15, r24	; 0x0f

	}
}
void receive_password(uint8*password)
{
	for(int i=0;i<4;i++)
    284c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	9e 8f       	std	Y+30, r25	; 0x1e
    2854:	8d 8f       	std	Y+29, r24	; 0x1d
    2856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285a:	84 30       	cpi	r24, 0x04	; 4
    285c:	91 05       	cpc	r25, r1
    285e:	0c f4       	brge	.+2      	; 0x2862 <receive_password+0x132>
    2860:	78 cf       	rjmp	.-272    	; 0x2752 <receive_password+0x22>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a8 ec       	ldi	r26, 0xC8	; 200
    2868:	b2 e4       	ldi	r27, 0x42	; 66
    286a:	8b 87       	std	Y+11, r24	; 0x0b
    286c:	9c 87       	std	Y+12, r25	; 0x0c
    286e:	ad 87       	std	Y+13, r26	; 0x0d
    2870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2872:	6b 85       	ldd	r22, Y+11	; 0x0b
    2874:	7c 85       	ldd	r23, Y+12	; 0x0c
    2876:	8d 85       	ldd	r24, Y+13	; 0x0d
    2878:	9e 85       	ldd	r25, Y+14	; 0x0e
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a ef       	ldi	r20, 0xFA	; 250
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	8f 83       	std	Y+7, r24	; 0x07
    288c:	98 87       	std	Y+8, r25	; 0x08
    288e:	a9 87       	std	Y+9, r26	; 0x09
    2890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2892:	6f 81       	ldd	r22, Y+7	; 0x07
    2894:	78 85       	ldd	r23, Y+8	; 0x08
    2896:	89 85       	ldd	r24, Y+9	; 0x09
    2898:	9a 85       	ldd	r25, Y+10	; 0x0a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e8       	ldi	r20, 0x80	; 128
    28a0:	5f e3       	ldi	r21, 0x3F	; 63
    28a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	2c f4       	brge	.+10     	; 0x28b4 <receive_password+0x184>
		__ticks = 1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
    28b2:	3f c0       	rjmp	.+126    	; 0x2932 <receive_password+0x202>
	else if (__tmp > 65535)
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	3f ef       	ldi	r19, 0xFF	; 255
    28c0:	4f e7       	ldi	r20, 0x7F	; 127
    28c2:	57 e4       	ldi	r21, 0x47	; 71
    28c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c8:	18 16       	cp	r1, r24
    28ca:	4c f5       	brge	.+82     	; 0x291e <receive_password+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e2       	ldi	r20, 0x20	; 32
    28da:	51 e4       	ldi	r21, 0x41	; 65
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <receive_password+0x1e4>
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9c 83       	std	Y+4, r25	; 0x04
    28fc:	8b 83       	std	Y+3, r24	; 0x03
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <receive_password+0x1d2>
    2906:	9c 83       	std	Y+4, r25	; 0x04
    2908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	9e 83       	std	Y+6, r25	; 0x06
    2912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	69 f7       	brne	.-38     	; 0x28f6 <receive_password+0x1c6>
    291c:	14 c0       	rjmp	.+40     	; 0x2946 <receive_password+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291e:	6f 81       	ldd	r22, Y+7	; 0x07
    2920:	78 85       	ldd	r23, Y+8	; 0x08
    2922:	89 85       	ldd	r24, Y+9	; 0x09
    2924:	9a 85       	ldd	r25, Y+10	; 0x0a
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <receive_password+0x20e>
    2942:	9a 83       	std	Y+2, r25	; 0x02
    2944:	89 83       	std	Y+1, r24	; 0x01
	{
		password[i]=UART_recieveByte();
		_delay_ms(100);
	}
	_delay_ms(100);
}
    2946:	a0 96       	adiw	r28, 0x20	; 32
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	08 95       	ret

0000295c <check_pw>:
void check_pw(uint8*password,uint8*check_password)
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	63 97       	sbiw	r28, 0x13	; 19
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	99 8b       	std	Y+17, r25	; 0x11
    2972:	88 8b       	std	Y+16, r24	; 0x10
    2974:	7b 8b       	std	Y+19, r23	; 0x13
    2976:	6a 8b       	std	Y+18, r22	; 0x12
	for(uint8 i=0;i<4;i++)
    2978:	1f 86       	std	Y+15, r1	; 0x0f
    297a:	93 c0       	rjmp	.+294    	; 0x2aa2 <check_pw+0x146>
	{
		if(password[i]!=check_password[i])
    297c:	8f 85       	ldd	r24, Y+15	; 0x0f
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	88 89       	ldd	r24, Y+16	; 0x10
    2984:	99 89       	ldd	r25, Y+17	; 0x11
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	40 81       	ld	r20, Z
    298e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	8a 89       	ldd	r24, Y+18	; 0x12
    2996:	9b 89       	ldd	r25, Y+19	; 0x13
    2998:	fc 01       	movw	r30, r24
    299a:	e2 0f       	add	r30, r18
    299c:	f3 1f       	adc	r31, r19
    299e:	80 81       	ld	r24, Z
    29a0:	48 17       	cp	r20, r24
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <check_pw+0x4a>
    29a4:	78 c0       	rjmp	.+240    	; 0x2a96 <check_pw+0x13a>
		{
			UART_sendByte(0);
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <UART_sendByte>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a2 e0       	ldi	r26, 0x02	; 2
    29b2:	b3 e4       	ldi	r27, 0x43	; 67
    29b4:	8b 87       	std	Y+11, r24	; 0x0b
    29b6:	9c 87       	std	Y+12, r25	; 0x0c
    29b8:	ad 87       	std	Y+13, r26	; 0x0d
    29ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8f 83       	std	Y+7, r24	; 0x07
    29d6:	98 87       	std	Y+8, r25	; 0x08
    29d8:	a9 87       	std	Y+9, r26	; 0x09
    29da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <check_pw+0xa2>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <check_pw+0x120>
	else if (__tmp > 65535)
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <check_pw+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <check_pw+0x102>
    2a40:	88 ec       	ldi	r24, 0xC8	; 200
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <check_pw+0xf0>
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <check_pw+0xe4>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <check_pw+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <check_pw+0x12c>
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(130);
			check_flag=0;
    2a90:	10 92 68 00 	sts	0x0068, r1
    2a94:	0a c0       	rjmp	.+20     	; 0x2aaa <check_pw+0x14e>
			break;
		}
		check_flag=1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	80 93 68 00 	sts	0x0068, r24
	}
	_delay_ms(100);
}
void check_pw(uint8*password,uint8*check_password)
{
	for(uint8 i=0;i<4;i++)
    2a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8f 87       	std	Y+15, r24	; 0x0f
    2aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa4:	84 30       	cpi	r24, 0x04	; 4
    2aa6:	08 f4       	brcc	.+2      	; 0x2aaa <check_pw+0x14e>
    2aa8:	69 cf       	rjmp	.-302    	; 0x297c <check_pw+0x20>
			check_flag=0;
			break;
		}
		check_flag=1;
	}
	if(check_flag==1){UART_sendByte(1);}
    2aaa:	80 91 68 00 	lds	r24, 0x0068
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	19 f4       	brne	.+6      	; 0x2ab8 <check_pw+0x15c>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <UART_sendByte>
}
    2ab8:	63 96       	adiw	r28, 0x13	; 19
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <eeprom_save_password>:
void eeprom_save_password(uint8*password)
{
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	61 97       	sbiw	r28, 0x11	; 17
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	99 8b       	std	Y+17, r25	; 0x11
    2ae0:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++) {
    2ae2:	1f 86       	std	Y+15, r1	; 0x0f
    2ae4:	88 c0       	rjmp	.+272    	; 0x2bf6 <eeprom_save_password+0x12c>
			EEPROM_writeByte( (0x80 + i), password[i] );
    2ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	80 58       	subi	r24, 0x80	; 128
    2aee:	9f 4f       	sbci	r25, 0xFF	; 255
    2af0:	ac 01       	movw	r20, r24
    2af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	88 89       	ldd	r24, Y+16	; 0x10
    2afa:	99 89       	ldd	r25, Y+17	; 0x11
    2afc:	fc 01       	movw	r30, r24
    2afe:	e2 0f       	add	r30, r18
    2b00:	f3 1f       	adc	r31, r19
    2b02:	20 81       	ld	r18, Z
    2b04:	ca 01       	movw	r24, r20
    2b06:	62 2f       	mov	r22, r18
    2b08:	0e 94 e5 08 	call	0x11ca	; 0x11ca <EEPROM_writeByte>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a8 ec       	ldi	r26, 0xC8	; 200
    2b12:	b2 e4       	ldi	r27, 0x42	; 66
    2b14:	8b 87       	std	Y+11, r24	; 0x0b
    2b16:	9c 87       	std	Y+12, r25	; 0x0c
    2b18:	ad 87       	std	Y+13, r26	; 0x0d
    2b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8f 83       	std	Y+7, r24	; 0x07
    2b36:	98 87       	std	Y+8, r25	; 0x08
    2b38:	a9 87       	std	Y+9, r26	; 0x09
    2b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3e:	78 85       	ldd	r23, Y+8	; 0x08
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <eeprom_save_password+0x94>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <eeprom_save_password+0x112>
	else if (__tmp > 65535)
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <eeprom_save_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <eeprom_save_password+0xf4>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9c 83       	std	Y+4, r25	; 0x04
    2ba6:	8b 83       	std	Y+3, r24	; 0x03
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <eeprom_save_password+0xe2>
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <eeprom_save_password+0xd6>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <eeprom_save_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9e 83       	std	Y+6, r25	; 0x06
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <eeprom_save_password+0x11e>
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
	}
	if(check_flag==1){UART_sendByte(1);}
}
void eeprom_save_password(uint8*password)
{
	for (uint8 i = 0; i < 4; i++) {
    2bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf2:	8f 5f       	subi	r24, 0xFF	; 255
    2bf4:	8f 87       	std	Y+15, r24	; 0x0f
    2bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf8:	84 30       	cpi	r24, 0x04	; 4
    2bfa:	08 f4       	brcc	.+2      	; 0x2bfe <eeprom_save_password+0x134>
    2bfc:	74 cf       	rjmp	.-280    	; 0x2ae6 <eeprom_save_password+0x1c>
			EEPROM_writeByte( (0x80 + i), password[i] );
			_delay_ms(100);
		}
}
    2bfe:	61 96       	adiw	r28, 0x11	; 17
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <eeprom_load_password>:

void eeprom_load_password(uint8*password)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	61 97       	sbiw	r28, 0x11	; 17
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	99 8b       	std	Y+17, r25	; 0x11
    2c26:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++) {
    2c28:	1f 86       	std	Y+15, r1	; 0x0f
    2c2a:	86 c0       	rjmp	.+268    	; 0x2d38 <eeprom_load_password+0x128>
					EEPROM_readByte((0x80+i), (password+i));
    2c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2e:	88 2f       	mov	r24, r24
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	80 58       	subi	r24, 0x80	; 128
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	ac 01       	movw	r20, r24
    2c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	88 89       	ldd	r24, Y+16	; 0x10
    2c40:	99 89       	ldd	r25, Y+17	; 0x11
    2c42:	28 0f       	add	r18, r24
    2c44:	39 1f       	adc	r19, r25
    2c46:	ca 01       	movw	r24, r20
    2c48:	b9 01       	movw	r22, r18
    2c4a:	0e 94 26 09 	call	0x124c	; 0x124c <EEPROM_readByte>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	a8 ec       	ldi	r26, 0xC8	; 200
    2c54:	b2 e4       	ldi	r27, 0x42	; 66
    2c56:	8b 87       	std	Y+11, r24	; 0x0b
    2c58:	9c 87       	std	Y+12, r25	; 0x0c
    2c5a:	ad 87       	std	Y+13, r26	; 0x0d
    2c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a ef       	ldi	r20, 0xFA	; 250
    2c6c:	54 e4       	ldi	r21, 0x44	; 68
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8f 83       	std	Y+7, r24	; 0x07
    2c78:	98 87       	std	Y+8, r25	; 0x08
    2c7a:	a9 87       	std	Y+9, r26	; 0x09
    2c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c80:	78 85       	ldd	r23, Y+8	; 0x08
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e8       	ldi	r20, 0x80	; 128
    2c8c:	5f e3       	ldi	r21, 0x3F	; 63
    2c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c92:	88 23       	and	r24, r24
    2c94:	2c f4       	brge	.+10     	; 0x2ca0 <eeprom_load_password+0x90>
		__ticks = 1;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	3f c0       	rjmp	.+126    	; 0x2d1e <eeprom_load_password+0x10e>
	else if (__tmp > 65535)
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	3f ef       	ldi	r19, 0xFF	; 255
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb4:	18 16       	cp	r1, r24
    2cb6:	4c f5       	brge	.+82     	; 0x2d0a <eeprom_load_password+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e2       	ldi	r20, 0x20	; 32
    2cc6:	51 e4       	ldi	r21, 0x41	; 65
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <eeprom_load_password+0xf0>
    2ce2:	88 ec       	ldi	r24, 0xC8	; 200
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <eeprom_load_password+0xde>
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f7       	brne	.-38     	; 0x2ce2 <eeprom_load_password+0xd2>
    2d08:	14 c0       	rjmp	.+40     	; 0x2d32 <eeprom_load_password+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0c:	78 85       	ldd	r23, Y+8	; 0x08
    2d0e:	89 85       	ldd	r24, Y+9	; 0x09
    2d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <eeprom_load_password+0x11a>
    2d2e:	9a 83       	std	Y+2, r25	; 0x02
    2d30:	89 83       	std	Y+1, r24	; 0x01
		}
}

void eeprom_load_password(uint8*password)
{
	for (uint8 i = 0; i < 4; i++) {
    2d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d34:	8f 5f       	subi	r24, 0xFF	; 255
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	84 30       	cpi	r24, 0x04	; 4
    2d3c:	08 f4       	brcc	.+2      	; 0x2d40 <eeprom_load_password+0x130>
    2d3e:	76 cf       	rjmp	.-276    	; 0x2c2c <eeprom_load_password+0x1c>
					EEPROM_readByte((0x80+i), (password+i));
					_delay_ms(100);
				}
}
    2d40:	61 96       	adiw	r28, 0x11	; 17
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config*ptr_config)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <UART_init+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <UART_init+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d62:	1a 82       	std	Y+2, r1	; 0x02
    2d64:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d66:	eb e2       	ldi	r30, 0x2B	; 43
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2d6e:	ea e2       	ldi	r30, 0x2A	; 42
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	88 e1       	ldi	r24, 0x18	; 24
    2d74:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (ptr_config->mode<<6)|(ptr_config->ParityBits<<5)|(ptr_config->StopBits<<3);
    2d76:	a0 e4       	ldi	r26, 0x40	; 64
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7e:	84 81       	ldd	r24, Z+4	; 0x04
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	00 24       	eor	r0, r0
    2d86:	96 95       	lsr	r25
    2d88:	87 95       	ror	r24
    2d8a:	07 94       	ror	r0
    2d8c:	96 95       	lsr	r25
    2d8e:	87 95       	ror	r24
    2d90:	07 94       	ror	r0
    2d92:	98 2f       	mov	r25, r24
    2d94:	80 2d       	mov	r24, r0
    2d96:	28 2f       	mov	r18, r24
    2d98:	eb 81       	ldd	r30, Y+3	; 0x03
    2d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d9c:	86 81       	ldd	r24, Z+6	; 0x06
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	82 95       	swap	r24
    2da8:	92 95       	swap	r25
    2daa:	90 7f       	andi	r25, 0xF0	; 240
    2dac:	98 27       	eor	r25, r24
    2dae:	80 7f       	andi	r24, 0xF0	; 240
    2db0:	98 27       	eor	r25, r24
    2db2:	28 2b       	or	r18, r24
    2db4:	eb 81       	ldd	r30, Y+3	; 0x03
    2db6:	fc 81       	ldd	r31, Y+4	; 0x04
    2db8:	85 81       	ldd	r24, Z+5	; 0x05
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	82 2b       	or	r24, r18
    2dcc:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((ptr_config->BaudRate) * 8UL))) - 1);
    2dce:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd8:	b3 81       	ldd	r27, Z+3	; 0x03
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	aa 1f       	adc	r26, r26
    2de0:	bb 1f       	adc	r27, r27
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	aa 1f       	adc	r26, r26
    2de8:	bb 1f       	adc	r27, r27
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	aa 1f       	adc	r26, r26
    2df0:	bb 1f       	adc	r27, r27
    2df2:	9c 01       	movw	r18, r24
    2df4:	ad 01       	movw	r20, r26
    2df6:	80 e4       	ldi	r24, 0x40	; 64
    2df8:	92 e4       	ldi	r25, 0x42	; 66
    2dfa:	af e0       	ldi	r26, 0x0F	; 15
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__udivmodsi4>
    2e06:	da 01       	movw	r26, r20
    2e08:	c9 01       	movw	r24, r18
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e10:	e0 e4       	ldi	r30, 0x40	; 64
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	9a 81       	ldd	r25, Y+2	; 0x02
    2e18:	89 2f       	mov	r24, r25
    2e1a:	99 27       	eor	r25, r25
    2e1c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e1e:	e9 e2       	ldi	r30, 0x29	; 41
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	80 83       	st	Z, r24
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	0f 92       	push	r0
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e40:	eb e2       	ldi	r30, 0x2B	; 43
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	80 72       	andi	r24, 0x20	; 32
    2e4c:	90 70       	andi	r25, 0x00	; 0
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	b9 f3       	breq	.-18     	; 0x2e40 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e52:	ec e2       	ldi	r30, 0x2C	; 44
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e6a:	eb e2       	ldi	r30, 0x2B	; 43
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 23       	and	r24, r24
    2e72:	dc f7       	brge	.-10     	; 0x2e6a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e74:	ec e2       	ldi	r30, 0x2C	; 44
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
}
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <UART_sendString+0x6>
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9b 83       	std	Y+3, r25	; 0x03
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e90:	19 82       	std	Y+1, r1	; 0x01
    2e92:	0e c0       	rjmp	.+28     	; 0x2eb0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	80 81       	ld	r24, Z
    2ea6:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <UART_sendByte>
		i++;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e2 0f       	add	r30, r18
    2ebe:	f3 1f       	adc	r31, r19
    2ec0:	80 81       	ld	r24, Z
    2ec2:	88 23       	and	r24, r24
    2ec4:	39 f7       	brne	.-50     	; 0x2e94 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <UART_receiveString+0xa>
    2edc:	0f 92       	push	r0
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	9b 83       	std	Y+3, r25	; 0x03
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ee6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef2:	8c 01       	movw	r16, r24
    2ef4:	02 0f       	add	r16, r18
    2ef6:	13 1f       	adc	r17, r19
    2ef8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <UART_recieveByte>
    2efc:	f8 01       	movw	r30, r16
    2efe:	80 83       	st	Z, r24
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	8c 01       	movw	r16, r24
    2f14:	02 0f       	add	r16, r18
    2f16:	13 1f       	adc	r17, r19
    2f18:	0e 94 31 17 	call	0x2e62	; 0x2e62 <UART_recieveByte>
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	e2 0f       	add	r30, r18
    2f2e:	f3 1f       	adc	r31, r19
    2f30:	80 81       	ld	r24, Z
    2f32:	83 32       	cpi	r24, 0x23	; 35
    2f34:	31 f7       	brne	.-52     	; 0x2f02 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f40:	fc 01       	movw	r30, r24
    2f42:	e2 0f       	add	r30, r18
    2f44:	f3 1f       	adc	r31, r19
    2f46:	10 82       	st	Z, r1
}
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	08 95       	ret

00002f58 <__udivmodsi4>:
    2f58:	a1 e2       	ldi	r26, 0x21	; 33
    2f5a:	1a 2e       	mov	r1, r26
    2f5c:	aa 1b       	sub	r26, r26
    2f5e:	bb 1b       	sub	r27, r27
    2f60:	fd 01       	movw	r30, r26
    2f62:	0d c0       	rjmp	.+26     	; 0x2f7e <__udivmodsi4_ep>

00002f64 <__udivmodsi4_loop>:
    2f64:	aa 1f       	adc	r26, r26
    2f66:	bb 1f       	adc	r27, r27
    2f68:	ee 1f       	adc	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	a2 17       	cp	r26, r18
    2f6e:	b3 07       	cpc	r27, r19
    2f70:	e4 07       	cpc	r30, r20
    2f72:	f5 07       	cpc	r31, r21
    2f74:	20 f0       	brcs	.+8      	; 0x2f7e <__udivmodsi4_ep>
    2f76:	a2 1b       	sub	r26, r18
    2f78:	b3 0b       	sbc	r27, r19
    2f7a:	e4 0b       	sbc	r30, r20
    2f7c:	f5 0b       	sbc	r31, r21

00002f7e <__udivmodsi4_ep>:
    2f7e:	66 1f       	adc	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	1a 94       	dec	r1
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <__udivmodsi4_loop>
    2f8a:	60 95       	com	r22
    2f8c:	70 95       	com	r23
    2f8e:	80 95       	com	r24
    2f90:	90 95       	com	r25
    2f92:	9b 01       	movw	r18, r22
    2f94:	ac 01       	movw	r20, r24
    2f96:	bd 01       	movw	r22, r26
    2f98:	cf 01       	movw	r24, r30
    2f9a:	08 95       	ret

00002f9c <__prologue_saves__>:
    2f9c:	2f 92       	push	r2
    2f9e:	3f 92       	push	r3
    2fa0:	4f 92       	push	r4
    2fa2:	5f 92       	push	r5
    2fa4:	6f 92       	push	r6
    2fa6:	7f 92       	push	r7
    2fa8:	8f 92       	push	r8
    2faa:	9f 92       	push	r9
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	ca 1b       	sub	r28, r26
    2fc6:	db 0b       	sbc	r29, r27
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	09 94       	ijmp

00002fd4 <__epilogue_restores__>:
    2fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fd6:	39 88       	ldd	r3, Y+17	; 0x11
    2fd8:	48 88       	ldd	r4, Y+16	; 0x10
    2fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fea:	df 80       	ldd	r13, Y+7	; 0x07
    2fec:	ee 80       	ldd	r14, Y+6	; 0x06
    2fee:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff8:	ce 0f       	add	r28, r30
    2ffa:	d1 1d       	adc	r29, r1
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	ed 01       	movw	r28, r26
    3008:	08 95       	ret

0000300a <itoa>:
    300a:	fb 01       	movw	r30, r22
    300c:	9f 01       	movw	r18, r30
    300e:	e8 94       	clt
    3010:	42 30       	cpi	r20, 0x02	; 2
    3012:	c4 f0       	brlt	.+48     	; 0x3044 <itoa+0x3a>
    3014:	45 32       	cpi	r20, 0x25	; 37
    3016:	b4 f4       	brge	.+44     	; 0x3044 <itoa+0x3a>
    3018:	4a 30       	cpi	r20, 0x0A	; 10
    301a:	29 f4       	brne	.+10     	; 0x3026 <itoa+0x1c>
    301c:	97 fb       	bst	r25, 7
    301e:	1e f4       	brtc	.+6      	; 0x3026 <itoa+0x1c>
    3020:	90 95       	com	r25
    3022:	81 95       	neg	r24
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	64 2f       	mov	r22, r20
    3028:	77 27       	eor	r23, r23
    302a:	0e 94 36 18 	call	0x306c	; 0x306c <__udivmodhi4>
    302e:	80 5d       	subi	r24, 0xD0	; 208
    3030:	8a 33       	cpi	r24, 0x3A	; 58
    3032:	0c f0       	brlt	.+2      	; 0x3036 <itoa+0x2c>
    3034:	89 5d       	subi	r24, 0xD9	; 217
    3036:	81 93       	st	Z+, r24
    3038:	cb 01       	movw	r24, r22
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	a1 f7       	brne	.-24     	; 0x3026 <itoa+0x1c>
    303e:	16 f4       	brtc	.+4      	; 0x3044 <itoa+0x3a>
    3040:	5d e2       	ldi	r21, 0x2D	; 45
    3042:	51 93       	st	Z+, r21
    3044:	10 82       	st	Z, r1
    3046:	c9 01       	movw	r24, r18
    3048:	0c 94 26 18 	jmp	0x304c	; 0x304c <strrev>

0000304c <strrev>:
    304c:	dc 01       	movw	r26, r24
    304e:	fc 01       	movw	r30, r24
    3050:	67 2f       	mov	r22, r23
    3052:	71 91       	ld	r23, Z+
    3054:	77 23       	and	r23, r23
    3056:	e1 f7       	brne	.-8      	; 0x3050 <strrev+0x4>
    3058:	32 97       	sbiw	r30, 0x02	; 2
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <strrev+0x18>
    305c:	7c 91       	ld	r23, X
    305e:	6d 93       	st	X+, r22
    3060:	70 83       	st	Z, r23
    3062:	62 91       	ld	r22, -Z
    3064:	ae 17       	cp	r26, r30
    3066:	bf 07       	cpc	r27, r31
    3068:	c8 f3       	brcs	.-14     	; 0x305c <strrev+0x10>
    306a:	08 95       	ret

0000306c <__udivmodhi4>:
    306c:	aa 1b       	sub	r26, r26
    306e:	bb 1b       	sub	r27, r27
    3070:	51 e1       	ldi	r21, 0x11	; 17
    3072:	07 c0       	rjmp	.+14     	; 0x3082 <__udivmodhi4_ep>

00003074 <__udivmodhi4_loop>:
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	a6 17       	cp	r26, r22
    307a:	b7 07       	cpc	r27, r23
    307c:	10 f0       	brcs	.+4      	; 0x3082 <__udivmodhi4_ep>
    307e:	a6 1b       	sub	r26, r22
    3080:	b7 0b       	sbc	r27, r23

00003082 <__udivmodhi4_ep>:
    3082:	88 1f       	adc	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	5a 95       	dec	r21
    3088:	a9 f7       	brne	.-22     	; 0x3074 <__udivmodhi4_loop>
    308a:	80 95       	com	r24
    308c:	90 95       	com	r25
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	08 95       	ret

00003094 <_exit>:
    3094:	f8 94       	cli

00003096 <__stop_program>:
    3096:	ff cf       	rjmp	.-2      	; 0x3096 <__stop_program>
